// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2018 23:49:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    relogio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relogio_vlg_sample_tst(
	clockIn,
	conf,
	mode,
	reset,
	set,
	startStop,
	sampler_tx
);
input  clockIn;
input  conf;
input  mode;
input  reset;
input  set;
input  startStop;
output sampler_tx;

reg sample;
time current_time;
always @(clockIn or conf or mode or reset or set or startStop)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module relogio_vlg_check_tst (
	DisplayDezenaHoras,
	DisplayDezenaMinutos,
	DisplayDezenaSegundos,
	DisplayHEX0,
	DisplayHEX1,
	DisplayUnidadeHoras,
	DisplayUnidadeMinutos,
	DisplayUnidadeSegundos,
	sampler_rx
);
input [6:0] DisplayDezenaHoras;
input [6:0] DisplayDezenaMinutos;
input [6:0] DisplayDezenaSegundos;
input [6:0] DisplayHEX0;
input [6:0] DisplayHEX1;
input [6:0] DisplayUnidadeHoras;
input [6:0] DisplayUnidadeMinutos;
input [6:0] DisplayUnidadeSegundos;
input sampler_rx;

reg [6:0] DisplayDezenaHoras_expected;
reg [6:0] DisplayDezenaMinutos_expected;
reg [6:0] DisplayDezenaSegundos_expected;
reg [6:0] DisplayHEX0_expected;
reg [6:0] DisplayHEX1_expected;
reg [6:0] DisplayUnidadeHoras_expected;
reg [6:0] DisplayUnidadeMinutos_expected;
reg [6:0] DisplayUnidadeSegundos_expected;

reg [6:0] DisplayDezenaHoras_prev;
reg [6:0] DisplayDezenaMinutos_prev;
reg [6:0] DisplayDezenaSegundos_prev;
reg [6:0] DisplayHEX0_prev;
reg [6:0] DisplayHEX1_prev;
reg [6:0] DisplayUnidadeHoras_prev;
reg [6:0] DisplayUnidadeMinutos_prev;
reg [6:0] DisplayUnidadeSegundos_prev;

reg [6:0] DisplayDezenaHoras_expected_prev;
reg [6:0] DisplayDezenaMinutos_expected_prev;
reg [6:0] DisplayDezenaSegundos_expected_prev;
reg [6:0] DisplayHEX0_expected_prev;
reg [6:0] DisplayHEX1_expected_prev;
reg [6:0] DisplayUnidadeHoras_expected_prev;
reg [6:0] DisplayUnidadeMinutos_expected_prev;
reg [6:0] DisplayUnidadeSegundos_expected_prev;

reg [6:0] last_DisplayDezenaHoras_exp;
reg [6:0] last_DisplayDezenaMinutos_exp;
reg [6:0] last_DisplayDezenaSegundos_exp;
reg [6:0] last_DisplayHEX0_exp;
reg [6:0] last_DisplayHEX1_exp;
reg [6:0] last_DisplayUnidadeHoras_exp;
reg [6:0] last_DisplayUnidadeMinutos_exp;
reg [6:0] last_DisplayUnidadeSegundos_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	DisplayDezenaHoras_prev = DisplayDezenaHoras;
	DisplayDezenaMinutos_prev = DisplayDezenaMinutos;
	DisplayDezenaSegundos_prev = DisplayDezenaSegundos;
	DisplayHEX0_prev = DisplayHEX0;
	DisplayHEX1_prev = DisplayHEX1;
	DisplayUnidadeHoras_prev = DisplayUnidadeHoras;
	DisplayUnidadeMinutos_prev = DisplayUnidadeMinutos;
	DisplayUnidadeSegundos_prev = DisplayUnidadeSegundos;
end

// update expected /o prevs

always @(trigger)
begin
	DisplayDezenaHoras_expected_prev = DisplayDezenaHoras_expected;
	DisplayDezenaMinutos_expected_prev = DisplayDezenaMinutos_expected;
	DisplayDezenaSegundos_expected_prev = DisplayDezenaSegundos_expected;
	DisplayHEX0_expected_prev = DisplayHEX0_expected;
	DisplayHEX1_expected_prev = DisplayHEX1_expected;
	DisplayUnidadeHoras_expected_prev = DisplayUnidadeHoras_expected;
	DisplayUnidadeMinutos_expected_prev = DisplayUnidadeMinutos_expected;
	DisplayUnidadeSegundos_expected_prev = DisplayUnidadeSegundos_expected;
end


// expected DisplayDezenaHoras[ 6 ]
initial
begin
	DisplayDezenaHoras_expected[6] = 1'bX;
end 
// expected DisplayDezenaHoras[ 5 ]
initial
begin
	DisplayDezenaHoras_expected[5] = 1'bX;
end 
// expected DisplayDezenaHoras[ 4 ]
initial
begin
	DisplayDezenaHoras_expected[4] = 1'bX;
end 
// expected DisplayDezenaHoras[ 3 ]
initial
begin
	DisplayDezenaHoras_expected[3] = 1'bX;
end 
// expected DisplayDezenaHoras[ 2 ]
initial
begin
	DisplayDezenaHoras_expected[2] = 1'bX;
end 
// expected DisplayDezenaHoras[ 1 ]
initial
begin
	DisplayDezenaHoras_expected[1] = 1'bX;
end 
// expected DisplayDezenaHoras[ 0 ]
initial
begin
	DisplayDezenaHoras_expected[0] = 1'bX;
end 
// expected DisplayDezenaMinutos[ 6 ]
initial
begin
	DisplayDezenaMinutos_expected[6] = 1'bX;
end 
// expected DisplayDezenaMinutos[ 5 ]
initial
begin
	DisplayDezenaMinutos_expected[5] = 1'bX;
end 
// expected DisplayDezenaMinutos[ 4 ]
initial
begin
	DisplayDezenaMinutos_expected[4] = 1'bX;
end 
// expected DisplayDezenaMinutos[ 3 ]
initial
begin
	DisplayDezenaMinutos_expected[3] = 1'bX;
end 
// expected DisplayDezenaMinutos[ 2 ]
initial
begin
	DisplayDezenaMinutos_expected[2] = 1'bX;
end 
// expected DisplayDezenaMinutos[ 1 ]
initial
begin
	DisplayDezenaMinutos_expected[1] = 1'bX;
end 
// expected DisplayDezenaMinutos[ 0 ]
initial
begin
	DisplayDezenaMinutos_expected[0] = 1'bX;
end 
// expected DisplayDezenaSegundos[ 6 ]
initial
begin
	DisplayDezenaSegundos_expected[6] = 1'bX;
end 
// expected DisplayDezenaSegundos[ 5 ]
initial
begin
	DisplayDezenaSegundos_expected[5] = 1'bX;
end 
// expected DisplayDezenaSegundos[ 4 ]
initial
begin
	DisplayDezenaSegundos_expected[4] = 1'bX;
end 
// expected DisplayDezenaSegundos[ 3 ]
initial
begin
	DisplayDezenaSegundos_expected[3] = 1'bX;
end 
// expected DisplayDezenaSegundos[ 2 ]
initial
begin
	DisplayDezenaSegundos_expected[2] = 1'bX;
end 
// expected DisplayDezenaSegundos[ 1 ]
initial
begin
	DisplayDezenaSegundos_expected[1] = 1'bX;
end 
// expected DisplayDezenaSegundos[ 0 ]
initial
begin
	DisplayDezenaSegundos_expected[0] = 1'bX;
end 
// expected DisplayHEX0[ 6 ]
initial
begin
	DisplayHEX0_expected[6] = 1'bX;
end 
// expected DisplayHEX0[ 5 ]
initial
begin
	DisplayHEX0_expected[5] = 1'bX;
end 
// expected DisplayHEX0[ 4 ]
initial
begin
	DisplayHEX0_expected[4] = 1'bX;
end 
// expected DisplayHEX0[ 3 ]
initial
begin
	DisplayHEX0_expected[3] = 1'bX;
end 
// expected DisplayHEX0[ 2 ]
initial
begin
	DisplayHEX0_expected[2] = 1'bX;
end 
// expected DisplayHEX0[ 1 ]
initial
begin
	DisplayHEX0_expected[1] = 1'bX;
end 
// expected DisplayHEX0[ 0 ]
initial
begin
	DisplayHEX0_expected[0] = 1'bX;
end 
// expected DisplayHEX1[ 6 ]
initial
begin
	DisplayHEX1_expected[6] = 1'bX;
end 
// expected DisplayHEX1[ 5 ]
initial
begin
	DisplayHEX1_expected[5] = 1'bX;
end 
// expected DisplayHEX1[ 4 ]
initial
begin
	DisplayHEX1_expected[4] = 1'bX;
end 
// expected DisplayHEX1[ 3 ]
initial
begin
	DisplayHEX1_expected[3] = 1'bX;
end 
// expected DisplayHEX1[ 2 ]
initial
begin
	DisplayHEX1_expected[2] = 1'bX;
end 
// expected DisplayHEX1[ 1 ]
initial
begin
	DisplayHEX1_expected[1] = 1'bX;
end 
// expected DisplayHEX1[ 0 ]
initial
begin
	DisplayHEX1_expected[0] = 1'bX;
end 
// expected DisplayUnidadeHoras[ 6 ]
initial
begin
	DisplayUnidadeHoras_expected[6] = 1'bX;
end 
// expected DisplayUnidadeHoras[ 5 ]
initial
begin
	DisplayUnidadeHoras_expected[5] = 1'bX;
end 
// expected DisplayUnidadeHoras[ 4 ]
initial
begin
	DisplayUnidadeHoras_expected[4] = 1'bX;
end 
// expected DisplayUnidadeHoras[ 3 ]
initial
begin
	DisplayUnidadeHoras_expected[3] = 1'bX;
end 
// expected DisplayUnidadeHoras[ 2 ]
initial
begin
	DisplayUnidadeHoras_expected[2] = 1'bX;
end 
// expected DisplayUnidadeHoras[ 1 ]
initial
begin
	DisplayUnidadeHoras_expected[1] = 1'bX;
end 
// expected DisplayUnidadeHoras[ 0 ]
initial
begin
	DisplayUnidadeHoras_expected[0] = 1'bX;
end 
// expected DisplayUnidadeMinutos[ 6 ]
initial
begin
	DisplayUnidadeMinutos_expected[6] = 1'bX;
end 
// expected DisplayUnidadeMinutos[ 5 ]
initial
begin
	DisplayUnidadeMinutos_expected[5] = 1'bX;
end 
// expected DisplayUnidadeMinutos[ 4 ]
initial
begin
	DisplayUnidadeMinutos_expected[4] = 1'bX;
end 
// expected DisplayUnidadeMinutos[ 3 ]
initial
begin
	DisplayUnidadeMinutos_expected[3] = 1'bX;
end 
// expected DisplayUnidadeMinutos[ 2 ]
initial
begin
	DisplayUnidadeMinutos_expected[2] = 1'bX;
end 
// expected DisplayUnidadeMinutos[ 1 ]
initial
begin
	DisplayUnidadeMinutos_expected[1] = 1'bX;
end 
// expected DisplayUnidadeMinutos[ 0 ]
initial
begin
	DisplayUnidadeMinutos_expected[0] = 1'bX;
end 
// expected DisplayUnidadeSegundos[ 6 ]
initial
begin
	DisplayUnidadeSegundos_expected[6] = 1'bX;
end 
// expected DisplayUnidadeSegundos[ 5 ]
initial
begin
	DisplayUnidadeSegundos_expected[5] = 1'bX;
end 
// expected DisplayUnidadeSegundos[ 4 ]
initial
begin
	DisplayUnidadeSegundos_expected[4] = 1'bX;
end 
// expected DisplayUnidadeSegundos[ 3 ]
initial
begin
	DisplayUnidadeSegundos_expected[3] = 1'bX;
end 
// expected DisplayUnidadeSegundos[ 2 ]
initial
begin
	DisplayUnidadeSegundos_expected[2] = 1'bX;
end 
// expected DisplayUnidadeSegundos[ 1 ]
initial
begin
	DisplayUnidadeSegundos_expected[1] = 1'bX;
end 
// expected DisplayUnidadeSegundos[ 0 ]
initial
begin
	DisplayUnidadeSegundos_expected[0] = 1'bX;
end 
// generate trigger
always @(DisplayDezenaHoras_expected or DisplayDezenaHoras or DisplayDezenaMinutos_expected or DisplayDezenaMinutos or DisplayDezenaSegundos_expected or DisplayDezenaSegundos or DisplayHEX0_expected or DisplayHEX0 or DisplayHEX1_expected or DisplayHEX1 or DisplayUnidadeHoras_expected or DisplayUnidadeHoras or DisplayUnidadeMinutos_expected or DisplayUnidadeMinutos or DisplayUnidadeSegundos_expected or DisplayUnidadeSegundos)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DisplayDezenaHoras = %b | expected DisplayDezenaMinutos = %b | expected DisplayDezenaSegundos = %b | expected DisplayHEX0 = %b | expected DisplayHEX1 = %b | expected DisplayUnidadeHoras = %b | expected DisplayUnidadeMinutos = %b | expected DisplayUnidadeSegundos = %b | ",DisplayDezenaHoras_expected_prev,DisplayDezenaMinutos_expected_prev,DisplayDezenaSegundos_expected_prev,DisplayHEX0_expected_prev,DisplayHEX1_expected_prev,DisplayUnidadeHoras_expected_prev,DisplayUnidadeMinutos_expected_prev,DisplayUnidadeSegundos_expected_prev);
	$display("| real DisplayDezenaHoras = %b | real DisplayDezenaMinutos = %b | real DisplayDezenaSegundos = %b | real DisplayHEX0 = %b | real DisplayHEX1 = %b | real DisplayUnidadeHoras = %b | real DisplayUnidadeMinutos = %b | real DisplayUnidadeSegundos = %b | ",DisplayDezenaHoras_prev,DisplayDezenaMinutos_prev,DisplayDezenaSegundos_prev,DisplayHEX0_prev,DisplayHEX1_prev,DisplayUnidadeHoras_prev,DisplayUnidadeMinutos_prev,DisplayUnidadeSegundos_prev);
`endif
	if (
		( DisplayDezenaHoras_expected_prev[0] !== 1'bx ) && ( DisplayDezenaHoras_prev[0] !== DisplayDezenaHoras_expected_prev[0] )
		&& ((DisplayDezenaHoras_expected_prev[0] !== last_DisplayDezenaHoras_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaHoras[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", DisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayDezenaHoras_exp[0] = DisplayDezenaHoras_expected_prev[0];
	end
	if (
		( DisplayDezenaHoras_expected_prev[1] !== 1'bx ) && ( DisplayDezenaHoras_prev[1] !== DisplayDezenaHoras_expected_prev[1] )
		&& ((DisplayDezenaHoras_expected_prev[1] !== last_DisplayDezenaHoras_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaHoras[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", DisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayDezenaHoras_exp[1] = DisplayDezenaHoras_expected_prev[1];
	end
	if (
		( DisplayDezenaHoras_expected_prev[2] !== 1'bx ) && ( DisplayDezenaHoras_prev[2] !== DisplayDezenaHoras_expected_prev[2] )
		&& ((DisplayDezenaHoras_expected_prev[2] !== last_DisplayDezenaHoras_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaHoras[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", DisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayDezenaHoras_exp[2] = DisplayDezenaHoras_expected_prev[2];
	end
	if (
		( DisplayDezenaHoras_expected_prev[3] !== 1'bx ) && ( DisplayDezenaHoras_prev[3] !== DisplayDezenaHoras_expected_prev[3] )
		&& ((DisplayDezenaHoras_expected_prev[3] !== last_DisplayDezenaHoras_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaHoras[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", DisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayDezenaHoras_exp[3] = DisplayDezenaHoras_expected_prev[3];
	end
	if (
		( DisplayDezenaHoras_expected_prev[4] !== 1'bx ) && ( DisplayDezenaHoras_prev[4] !== DisplayDezenaHoras_expected_prev[4] )
		&& ((DisplayDezenaHoras_expected_prev[4] !== last_DisplayDezenaHoras_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaHoras[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", DisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayDezenaHoras_exp[4] = DisplayDezenaHoras_expected_prev[4];
	end
	if (
		( DisplayDezenaHoras_expected_prev[5] !== 1'bx ) && ( DisplayDezenaHoras_prev[5] !== DisplayDezenaHoras_expected_prev[5] )
		&& ((DisplayDezenaHoras_expected_prev[5] !== last_DisplayDezenaHoras_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaHoras[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", DisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayDezenaHoras_exp[5] = DisplayDezenaHoras_expected_prev[5];
	end
	if (
		( DisplayDezenaHoras_expected_prev[6] !== 1'bx ) && ( DisplayDezenaHoras_prev[6] !== DisplayDezenaHoras_expected_prev[6] )
		&& ((DisplayDezenaHoras_expected_prev[6] !== last_DisplayDezenaHoras_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaHoras[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", DisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayDezenaHoras_exp[6] = DisplayDezenaHoras_expected_prev[6];
	end
	if (
		( DisplayDezenaMinutos_expected_prev[0] !== 1'bx ) && ( DisplayDezenaMinutos_prev[0] !== DisplayDezenaMinutos_expected_prev[0] )
		&& ((DisplayDezenaMinutos_expected_prev[0] !== last_DisplayDezenaMinutos_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaMinutos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayDezenaMinutos_exp[0] = DisplayDezenaMinutos_expected_prev[0];
	end
	if (
		( DisplayDezenaMinutos_expected_prev[1] !== 1'bx ) && ( DisplayDezenaMinutos_prev[1] !== DisplayDezenaMinutos_expected_prev[1] )
		&& ((DisplayDezenaMinutos_expected_prev[1] !== last_DisplayDezenaMinutos_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaMinutos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayDezenaMinutos_exp[1] = DisplayDezenaMinutos_expected_prev[1];
	end
	if (
		( DisplayDezenaMinutos_expected_prev[2] !== 1'bx ) && ( DisplayDezenaMinutos_prev[2] !== DisplayDezenaMinutos_expected_prev[2] )
		&& ((DisplayDezenaMinutos_expected_prev[2] !== last_DisplayDezenaMinutos_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaMinutos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayDezenaMinutos_exp[2] = DisplayDezenaMinutos_expected_prev[2];
	end
	if (
		( DisplayDezenaMinutos_expected_prev[3] !== 1'bx ) && ( DisplayDezenaMinutos_prev[3] !== DisplayDezenaMinutos_expected_prev[3] )
		&& ((DisplayDezenaMinutos_expected_prev[3] !== last_DisplayDezenaMinutos_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaMinutos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayDezenaMinutos_exp[3] = DisplayDezenaMinutos_expected_prev[3];
	end
	if (
		( DisplayDezenaMinutos_expected_prev[4] !== 1'bx ) && ( DisplayDezenaMinutos_prev[4] !== DisplayDezenaMinutos_expected_prev[4] )
		&& ((DisplayDezenaMinutos_expected_prev[4] !== last_DisplayDezenaMinutos_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaMinutos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayDezenaMinutos_exp[4] = DisplayDezenaMinutos_expected_prev[4];
	end
	if (
		( DisplayDezenaMinutos_expected_prev[5] !== 1'bx ) && ( DisplayDezenaMinutos_prev[5] !== DisplayDezenaMinutos_expected_prev[5] )
		&& ((DisplayDezenaMinutos_expected_prev[5] !== last_DisplayDezenaMinutos_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaMinutos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayDezenaMinutos_exp[5] = DisplayDezenaMinutos_expected_prev[5];
	end
	if (
		( DisplayDezenaMinutos_expected_prev[6] !== 1'bx ) && ( DisplayDezenaMinutos_prev[6] !== DisplayDezenaMinutos_expected_prev[6] )
		&& ((DisplayDezenaMinutos_expected_prev[6] !== last_DisplayDezenaMinutos_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaMinutos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayDezenaMinutos_exp[6] = DisplayDezenaMinutos_expected_prev[6];
	end
	if (
		( DisplayDezenaSegundos_expected_prev[0] !== 1'bx ) && ( DisplayDezenaSegundos_prev[0] !== DisplayDezenaSegundos_expected_prev[0] )
		&& ((DisplayDezenaSegundos_expected_prev[0] !== last_DisplayDezenaSegundos_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaSegundos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayDezenaSegundos_exp[0] = DisplayDezenaSegundos_expected_prev[0];
	end
	if (
		( DisplayDezenaSegundos_expected_prev[1] !== 1'bx ) && ( DisplayDezenaSegundos_prev[1] !== DisplayDezenaSegundos_expected_prev[1] )
		&& ((DisplayDezenaSegundos_expected_prev[1] !== last_DisplayDezenaSegundos_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaSegundos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayDezenaSegundos_exp[1] = DisplayDezenaSegundos_expected_prev[1];
	end
	if (
		( DisplayDezenaSegundos_expected_prev[2] !== 1'bx ) && ( DisplayDezenaSegundos_prev[2] !== DisplayDezenaSegundos_expected_prev[2] )
		&& ((DisplayDezenaSegundos_expected_prev[2] !== last_DisplayDezenaSegundos_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaSegundos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayDezenaSegundos_exp[2] = DisplayDezenaSegundos_expected_prev[2];
	end
	if (
		( DisplayDezenaSegundos_expected_prev[3] !== 1'bx ) && ( DisplayDezenaSegundos_prev[3] !== DisplayDezenaSegundos_expected_prev[3] )
		&& ((DisplayDezenaSegundos_expected_prev[3] !== last_DisplayDezenaSegundos_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaSegundos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayDezenaSegundos_exp[3] = DisplayDezenaSegundos_expected_prev[3];
	end
	if (
		( DisplayDezenaSegundos_expected_prev[4] !== 1'bx ) && ( DisplayDezenaSegundos_prev[4] !== DisplayDezenaSegundos_expected_prev[4] )
		&& ((DisplayDezenaSegundos_expected_prev[4] !== last_DisplayDezenaSegundos_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaSegundos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayDezenaSegundos_exp[4] = DisplayDezenaSegundos_expected_prev[4];
	end
	if (
		( DisplayDezenaSegundos_expected_prev[5] !== 1'bx ) && ( DisplayDezenaSegundos_prev[5] !== DisplayDezenaSegundos_expected_prev[5] )
		&& ((DisplayDezenaSegundos_expected_prev[5] !== last_DisplayDezenaSegundos_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaSegundos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayDezenaSegundos_exp[5] = DisplayDezenaSegundos_expected_prev[5];
	end
	if (
		( DisplayDezenaSegundos_expected_prev[6] !== 1'bx ) && ( DisplayDezenaSegundos_prev[6] !== DisplayDezenaSegundos_expected_prev[6] )
		&& ((DisplayDezenaSegundos_expected_prev[6] !== last_DisplayDezenaSegundos_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayDezenaSegundos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", DisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayDezenaSegundos_exp[6] = DisplayDezenaSegundos_expected_prev[6];
	end
	if (
		( DisplayHEX0_expected_prev[0] !== 1'bx ) && ( DisplayHEX0_prev[0] !== DisplayHEX0_expected_prev[0] )
		&& ((DisplayHEX0_expected_prev[0] !== last_DisplayHEX0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX0_exp[0] = DisplayHEX0_expected_prev[0];
	end
	if (
		( DisplayHEX0_expected_prev[1] !== 1'bx ) && ( DisplayHEX0_prev[1] !== DisplayHEX0_expected_prev[1] )
		&& ((DisplayHEX0_expected_prev[1] !== last_DisplayHEX0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX0_exp[1] = DisplayHEX0_expected_prev[1];
	end
	if (
		( DisplayHEX0_expected_prev[2] !== 1'bx ) && ( DisplayHEX0_prev[2] !== DisplayHEX0_expected_prev[2] )
		&& ((DisplayHEX0_expected_prev[2] !== last_DisplayHEX0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX0_exp[2] = DisplayHEX0_expected_prev[2];
	end
	if (
		( DisplayHEX0_expected_prev[3] !== 1'bx ) && ( DisplayHEX0_prev[3] !== DisplayHEX0_expected_prev[3] )
		&& ((DisplayHEX0_expected_prev[3] !== last_DisplayHEX0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX0_exp[3] = DisplayHEX0_expected_prev[3];
	end
	if (
		( DisplayHEX0_expected_prev[4] !== 1'bx ) && ( DisplayHEX0_prev[4] !== DisplayHEX0_expected_prev[4] )
		&& ((DisplayHEX0_expected_prev[4] !== last_DisplayHEX0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX0_exp[4] = DisplayHEX0_expected_prev[4];
	end
	if (
		( DisplayHEX0_expected_prev[5] !== 1'bx ) && ( DisplayHEX0_prev[5] !== DisplayHEX0_expected_prev[5] )
		&& ((DisplayHEX0_expected_prev[5] !== last_DisplayHEX0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX0_exp[5] = DisplayHEX0_expected_prev[5];
	end
	if (
		( DisplayHEX0_expected_prev[6] !== 1'bx ) && ( DisplayHEX0_prev[6] !== DisplayHEX0_expected_prev[6] )
		&& ((DisplayHEX0_expected_prev[6] !== last_DisplayHEX0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX0_exp[6] = DisplayHEX0_expected_prev[6];
	end
	if (
		( DisplayHEX1_expected_prev[0] !== 1'bx ) && ( DisplayHEX1_prev[0] !== DisplayHEX1_expected_prev[0] )
		&& ((DisplayHEX1_expected_prev[0] !== last_DisplayHEX1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX1_exp[0] = DisplayHEX1_expected_prev[0];
	end
	if (
		( DisplayHEX1_expected_prev[1] !== 1'bx ) && ( DisplayHEX1_prev[1] !== DisplayHEX1_expected_prev[1] )
		&& ((DisplayHEX1_expected_prev[1] !== last_DisplayHEX1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX1_exp[1] = DisplayHEX1_expected_prev[1];
	end
	if (
		( DisplayHEX1_expected_prev[2] !== 1'bx ) && ( DisplayHEX1_prev[2] !== DisplayHEX1_expected_prev[2] )
		&& ((DisplayHEX1_expected_prev[2] !== last_DisplayHEX1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX1_exp[2] = DisplayHEX1_expected_prev[2];
	end
	if (
		( DisplayHEX1_expected_prev[3] !== 1'bx ) && ( DisplayHEX1_prev[3] !== DisplayHEX1_expected_prev[3] )
		&& ((DisplayHEX1_expected_prev[3] !== last_DisplayHEX1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX1_exp[3] = DisplayHEX1_expected_prev[3];
	end
	if (
		( DisplayHEX1_expected_prev[4] !== 1'bx ) && ( DisplayHEX1_prev[4] !== DisplayHEX1_expected_prev[4] )
		&& ((DisplayHEX1_expected_prev[4] !== last_DisplayHEX1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX1_exp[4] = DisplayHEX1_expected_prev[4];
	end
	if (
		( DisplayHEX1_expected_prev[5] !== 1'bx ) && ( DisplayHEX1_prev[5] !== DisplayHEX1_expected_prev[5] )
		&& ((DisplayHEX1_expected_prev[5] !== last_DisplayHEX1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX1_exp[5] = DisplayHEX1_expected_prev[5];
	end
	if (
		( DisplayHEX1_expected_prev[6] !== 1'bx ) && ( DisplayHEX1_prev[6] !== DisplayHEX1_expected_prev[6] )
		&& ((DisplayHEX1_expected_prev[6] !== last_DisplayHEX1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX1_exp[6] = DisplayHEX1_expected_prev[6];
	end
	if (
		( DisplayUnidadeHoras_expected_prev[0] !== 1'bx ) && ( DisplayUnidadeHoras_prev[0] !== DisplayUnidadeHoras_expected_prev[0] )
		&& ((DisplayUnidadeHoras_expected_prev[0] !== last_DisplayUnidadeHoras_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeHoras[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayUnidadeHoras_exp[0] = DisplayUnidadeHoras_expected_prev[0];
	end
	if (
		( DisplayUnidadeHoras_expected_prev[1] !== 1'bx ) && ( DisplayUnidadeHoras_prev[1] !== DisplayUnidadeHoras_expected_prev[1] )
		&& ((DisplayUnidadeHoras_expected_prev[1] !== last_DisplayUnidadeHoras_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeHoras[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayUnidadeHoras_exp[1] = DisplayUnidadeHoras_expected_prev[1];
	end
	if (
		( DisplayUnidadeHoras_expected_prev[2] !== 1'bx ) && ( DisplayUnidadeHoras_prev[2] !== DisplayUnidadeHoras_expected_prev[2] )
		&& ((DisplayUnidadeHoras_expected_prev[2] !== last_DisplayUnidadeHoras_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeHoras[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayUnidadeHoras_exp[2] = DisplayUnidadeHoras_expected_prev[2];
	end
	if (
		( DisplayUnidadeHoras_expected_prev[3] !== 1'bx ) && ( DisplayUnidadeHoras_prev[3] !== DisplayUnidadeHoras_expected_prev[3] )
		&& ((DisplayUnidadeHoras_expected_prev[3] !== last_DisplayUnidadeHoras_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeHoras[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayUnidadeHoras_exp[3] = DisplayUnidadeHoras_expected_prev[3];
	end
	if (
		( DisplayUnidadeHoras_expected_prev[4] !== 1'bx ) && ( DisplayUnidadeHoras_prev[4] !== DisplayUnidadeHoras_expected_prev[4] )
		&& ((DisplayUnidadeHoras_expected_prev[4] !== last_DisplayUnidadeHoras_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeHoras[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayUnidadeHoras_exp[4] = DisplayUnidadeHoras_expected_prev[4];
	end
	if (
		( DisplayUnidadeHoras_expected_prev[5] !== 1'bx ) && ( DisplayUnidadeHoras_prev[5] !== DisplayUnidadeHoras_expected_prev[5] )
		&& ((DisplayUnidadeHoras_expected_prev[5] !== last_DisplayUnidadeHoras_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeHoras[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayUnidadeHoras_exp[5] = DisplayUnidadeHoras_expected_prev[5];
	end
	if (
		( DisplayUnidadeHoras_expected_prev[6] !== 1'bx ) && ( DisplayUnidadeHoras_prev[6] !== DisplayUnidadeHoras_expected_prev[6] )
		&& ((DisplayUnidadeHoras_expected_prev[6] !== last_DisplayUnidadeHoras_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeHoras[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayUnidadeHoras_exp[6] = DisplayUnidadeHoras_expected_prev[6];
	end
	if (
		( DisplayUnidadeMinutos_expected_prev[0] !== 1'bx ) && ( DisplayUnidadeMinutos_prev[0] !== DisplayUnidadeMinutos_expected_prev[0] )
		&& ((DisplayUnidadeMinutos_expected_prev[0] !== last_DisplayUnidadeMinutos_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeMinutos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayUnidadeMinutos_exp[0] = DisplayUnidadeMinutos_expected_prev[0];
	end
	if (
		( DisplayUnidadeMinutos_expected_prev[1] !== 1'bx ) && ( DisplayUnidadeMinutos_prev[1] !== DisplayUnidadeMinutos_expected_prev[1] )
		&& ((DisplayUnidadeMinutos_expected_prev[1] !== last_DisplayUnidadeMinutos_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeMinutos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayUnidadeMinutos_exp[1] = DisplayUnidadeMinutos_expected_prev[1];
	end
	if (
		( DisplayUnidadeMinutos_expected_prev[2] !== 1'bx ) && ( DisplayUnidadeMinutos_prev[2] !== DisplayUnidadeMinutos_expected_prev[2] )
		&& ((DisplayUnidadeMinutos_expected_prev[2] !== last_DisplayUnidadeMinutos_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeMinutos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayUnidadeMinutos_exp[2] = DisplayUnidadeMinutos_expected_prev[2];
	end
	if (
		( DisplayUnidadeMinutos_expected_prev[3] !== 1'bx ) && ( DisplayUnidadeMinutos_prev[3] !== DisplayUnidadeMinutos_expected_prev[3] )
		&& ((DisplayUnidadeMinutos_expected_prev[3] !== last_DisplayUnidadeMinutos_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeMinutos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayUnidadeMinutos_exp[3] = DisplayUnidadeMinutos_expected_prev[3];
	end
	if (
		( DisplayUnidadeMinutos_expected_prev[4] !== 1'bx ) && ( DisplayUnidadeMinutos_prev[4] !== DisplayUnidadeMinutos_expected_prev[4] )
		&& ((DisplayUnidadeMinutos_expected_prev[4] !== last_DisplayUnidadeMinutos_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeMinutos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayUnidadeMinutos_exp[4] = DisplayUnidadeMinutos_expected_prev[4];
	end
	if (
		( DisplayUnidadeMinutos_expected_prev[5] !== 1'bx ) && ( DisplayUnidadeMinutos_prev[5] !== DisplayUnidadeMinutos_expected_prev[5] )
		&& ((DisplayUnidadeMinutos_expected_prev[5] !== last_DisplayUnidadeMinutos_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeMinutos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayUnidadeMinutos_exp[5] = DisplayUnidadeMinutos_expected_prev[5];
	end
	if (
		( DisplayUnidadeMinutos_expected_prev[6] !== 1'bx ) && ( DisplayUnidadeMinutos_prev[6] !== DisplayUnidadeMinutos_expected_prev[6] )
		&& ((DisplayUnidadeMinutos_expected_prev[6] !== last_DisplayUnidadeMinutos_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeMinutos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayUnidadeMinutos_exp[6] = DisplayUnidadeMinutos_expected_prev[6];
	end
	if (
		( DisplayUnidadeSegundos_expected_prev[0] !== 1'bx ) && ( DisplayUnidadeSegundos_prev[0] !== DisplayUnidadeSegundos_expected_prev[0] )
		&& ((DisplayUnidadeSegundos_expected_prev[0] !== last_DisplayUnidadeSegundos_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeSegundos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayUnidadeSegundos_exp[0] = DisplayUnidadeSegundos_expected_prev[0];
	end
	if (
		( DisplayUnidadeSegundos_expected_prev[1] !== 1'bx ) && ( DisplayUnidadeSegundos_prev[1] !== DisplayUnidadeSegundos_expected_prev[1] )
		&& ((DisplayUnidadeSegundos_expected_prev[1] !== last_DisplayUnidadeSegundos_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeSegundos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayUnidadeSegundos_exp[1] = DisplayUnidadeSegundos_expected_prev[1];
	end
	if (
		( DisplayUnidadeSegundos_expected_prev[2] !== 1'bx ) && ( DisplayUnidadeSegundos_prev[2] !== DisplayUnidadeSegundos_expected_prev[2] )
		&& ((DisplayUnidadeSegundos_expected_prev[2] !== last_DisplayUnidadeSegundos_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeSegundos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayUnidadeSegundos_exp[2] = DisplayUnidadeSegundos_expected_prev[2];
	end
	if (
		( DisplayUnidadeSegundos_expected_prev[3] !== 1'bx ) && ( DisplayUnidadeSegundos_prev[3] !== DisplayUnidadeSegundos_expected_prev[3] )
		&& ((DisplayUnidadeSegundos_expected_prev[3] !== last_DisplayUnidadeSegundos_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeSegundos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayUnidadeSegundos_exp[3] = DisplayUnidadeSegundos_expected_prev[3];
	end
	if (
		( DisplayUnidadeSegundos_expected_prev[4] !== 1'bx ) && ( DisplayUnidadeSegundos_prev[4] !== DisplayUnidadeSegundos_expected_prev[4] )
		&& ((DisplayUnidadeSegundos_expected_prev[4] !== last_DisplayUnidadeSegundos_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeSegundos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayUnidadeSegundos_exp[4] = DisplayUnidadeSegundos_expected_prev[4];
	end
	if (
		( DisplayUnidadeSegundos_expected_prev[5] !== 1'bx ) && ( DisplayUnidadeSegundos_prev[5] !== DisplayUnidadeSegundos_expected_prev[5] )
		&& ((DisplayUnidadeSegundos_expected_prev[5] !== last_DisplayUnidadeSegundos_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeSegundos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayUnidadeSegundos_exp[5] = DisplayUnidadeSegundos_expected_prev[5];
	end
	if (
		( DisplayUnidadeSegundos_expected_prev[6] !== 1'bx ) && ( DisplayUnidadeSegundos_prev[6] !== DisplayUnidadeSegundos_expected_prev[6] )
		&& ((DisplayUnidadeSegundos_expected_prev[6] !== last_DisplayUnidadeSegundos_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayUnidadeSegundos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", DisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayUnidadeSegundos_exp[6] = DisplayUnidadeSegundos_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module relogio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clockIn;
reg conf;
reg mode;
reg reset;
reg set;
reg startStop;
// wires                                               
wire [6:0] DisplayDezenaHoras;
wire [6:0] DisplayDezenaMinutos;
wire [6:0] DisplayDezenaSegundos;
wire [6:0] DisplayHEX0;
wire [6:0] DisplayHEX1;
wire [6:0] DisplayUnidadeHoras;
wire [6:0] DisplayUnidadeMinutos;
wire [6:0] DisplayUnidadeSegundos;

wire sampler;                             

// assign statements (if any)                          
relogio i1 (
// port map - connection between master ports and signals/registers   
	.clockIn(clockIn),
	.conf(conf),
	.DisplayDezenaHoras(DisplayDezenaHoras),
	.DisplayDezenaMinutos(DisplayDezenaMinutos),
	.DisplayDezenaSegundos(DisplayDezenaSegundos),
	.DisplayHEX0(DisplayHEX0),
	.DisplayHEX1(DisplayHEX1),
	.DisplayUnidadeHoras(DisplayUnidadeHoras),
	.DisplayUnidadeMinutos(DisplayUnidadeMinutos),
	.DisplayUnidadeSegundos(DisplayUnidadeSegundos),
	.mode(mode),
	.reset(reset),
	.set(set),
	.startStop(startStop)
);

// clockIn
always
begin
	clockIn = 1'b0;
	clockIn = #500 1'b1;
	#500;
end 

// conf
initial
begin
	conf = 1'b0;
end 

// mode
initial
begin
	mode = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// set
initial
begin
	set = 1'b0;
end 

// startStop
initial
begin
	startStop = 1'b0;
end 

relogio_vlg_sample_tst tb_sample (
	.clockIn(clockIn),
	.conf(conf),
	.mode(mode),
	.reset(reset),
	.set(set),
	.startStop(startStop),
	.sampler_tx(sampler)
);

relogio_vlg_check_tst tb_out(
	.DisplayDezenaHoras(DisplayDezenaHoras),
	.DisplayDezenaMinutos(DisplayDezenaMinutos),
	.DisplayDezenaSegundos(DisplayDezenaSegundos),
	.DisplayHEX0(DisplayHEX0),
	.DisplayHEX1(DisplayHEX1),
	.DisplayUnidadeHoras(DisplayUnidadeHoras),
	.DisplayUnidadeMinutos(DisplayUnidadeMinutos),
	.DisplayUnidadeSegundos(DisplayUnidadeSegundos),
	.sampler_rx(sampler)
);
endmodule

