// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2018 22:58:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    contadorHMS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module contadorHMS_vlg_sample_tst(
	clock_in_ocilador,
	sampler_tx
);
input  clock_in_ocilador;
output sampler_tx;

reg sample;
time current_time;
always @(clock_in_ocilador)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module contadorHMS_vlg_check_tst (
	outH,
	outM,
	outS,
	sampler_rx
);
input [4:0] outH;
input [5:0] outM;
input [5:0] outS;
input sampler_rx;

reg [4:0] outH_expected;
reg [5:0] outM_expected;
reg [5:0] outS_expected;

reg [4:0] outH_prev;
reg [5:0] outM_prev;
reg [5:0] outS_prev;

reg [4:0] outH_expected_prev;
reg [5:0] outM_expected_prev;
reg [5:0] outS_expected_prev;

reg [4:0] last_outH_exp;
reg [5:0] last_outM_exp;
reg [5:0] last_outS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	outH_prev = outH;
	outM_prev = outM;
	outS_prev = outS;
end

// update expected /o prevs

always @(trigger)
begin
	outH_expected_prev = outH_expected;
	outM_expected_prev = outM_expected;
	outS_expected_prev = outS_expected;
end


// expected outH[ 4 ]
initial
begin
	outH_expected[4] = 1'bX;
end 
// expected outH[ 3 ]
initial
begin
	outH_expected[3] = 1'bX;
end 
// expected outH[ 2 ]
initial
begin
	outH_expected[2] = 1'bX;
end 
// expected outH[ 1 ]
initial
begin
	outH_expected[1] = 1'bX;
end 
// expected outH[ 0 ]
initial
begin
	outH_expected[0] = 1'bX;
end 
// expected outM[ 5 ]
initial
begin
	outM_expected[5] = 1'bX;
end 
// expected outM[ 4 ]
initial
begin
	outM_expected[4] = 1'bX;
end 
// expected outM[ 3 ]
initial
begin
	outM_expected[3] = 1'bX;
end 
// expected outM[ 2 ]
initial
begin
	outM_expected[2] = 1'bX;
end 
// expected outM[ 1 ]
initial
begin
	outM_expected[1] = 1'bX;
end 
// expected outM[ 0 ]
initial
begin
	outM_expected[0] = 1'bX;
end 
// expected outS[ 5 ]
initial
begin
	outS_expected[5] = 1'bX;
end 
// expected outS[ 4 ]
initial
begin
	outS_expected[4] = 1'bX;
end 
// expected outS[ 3 ]
initial
begin
	outS_expected[3] = 1'bX;
end 
// expected outS[ 2 ]
initial
begin
	outS_expected[2] = 1'bX;
end 
// expected outS[ 1 ]
initial
begin
	outS_expected[1] = 1'bX;
end 
// expected outS[ 0 ]
initial
begin
	outS_expected[0] = 1'bX;
end 
// generate trigger
always @(outH_expected or outH or outM_expected or outM or outS_expected or outS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outH = %b | expected outM = %b | expected outS = %b | ",outH_expected_prev,outM_expected_prev,outS_expected_prev);
	$display("| real outH = %b | real outM = %b | real outS = %b | ",outH_prev,outM_prev,outS_prev);
`endif
	if (
		( outH_expected_prev[0] !== 1'bx ) && ( outH_prev[0] !== outH_expected_prev[0] )
		&& ((outH_expected_prev[0] !== last_outH_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outH_expected_prev);
		$display ("     Real value = %b", outH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outH_exp[0] = outH_expected_prev[0];
	end
	if (
		( outH_expected_prev[1] !== 1'bx ) && ( outH_prev[1] !== outH_expected_prev[1] )
		&& ((outH_expected_prev[1] !== last_outH_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outH_expected_prev);
		$display ("     Real value = %b", outH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outH_exp[1] = outH_expected_prev[1];
	end
	if (
		( outH_expected_prev[2] !== 1'bx ) && ( outH_prev[2] !== outH_expected_prev[2] )
		&& ((outH_expected_prev[2] !== last_outH_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outH_expected_prev);
		$display ("     Real value = %b", outH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outH_exp[2] = outH_expected_prev[2];
	end
	if (
		( outH_expected_prev[3] !== 1'bx ) && ( outH_prev[3] !== outH_expected_prev[3] )
		&& ((outH_expected_prev[3] !== last_outH_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outH_expected_prev);
		$display ("     Real value = %b", outH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outH_exp[3] = outH_expected_prev[3];
	end
	if (
		( outH_expected_prev[4] !== 1'bx ) && ( outH_prev[4] !== outH_expected_prev[4] )
		&& ((outH_expected_prev[4] !== last_outH_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outH[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outH_expected_prev);
		$display ("     Real value = %b", outH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outH_exp[4] = outH_expected_prev[4];
	end
	if (
		( outM_expected_prev[0] !== 1'bx ) && ( outM_prev[0] !== outM_expected_prev[0] )
		&& ((outM_expected_prev[0] !== last_outM_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outM_expected_prev);
		$display ("     Real value = %b", outM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outM_exp[0] = outM_expected_prev[0];
	end
	if (
		( outM_expected_prev[1] !== 1'bx ) && ( outM_prev[1] !== outM_expected_prev[1] )
		&& ((outM_expected_prev[1] !== last_outM_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outM_expected_prev);
		$display ("     Real value = %b", outM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outM_exp[1] = outM_expected_prev[1];
	end
	if (
		( outM_expected_prev[2] !== 1'bx ) && ( outM_prev[2] !== outM_expected_prev[2] )
		&& ((outM_expected_prev[2] !== last_outM_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outM_expected_prev);
		$display ("     Real value = %b", outM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outM_exp[2] = outM_expected_prev[2];
	end
	if (
		( outM_expected_prev[3] !== 1'bx ) && ( outM_prev[3] !== outM_expected_prev[3] )
		&& ((outM_expected_prev[3] !== last_outM_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outM_expected_prev);
		$display ("     Real value = %b", outM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outM_exp[3] = outM_expected_prev[3];
	end
	if (
		( outM_expected_prev[4] !== 1'bx ) && ( outM_prev[4] !== outM_expected_prev[4] )
		&& ((outM_expected_prev[4] !== last_outM_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outM_expected_prev);
		$display ("     Real value = %b", outM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outM_exp[4] = outM_expected_prev[4];
	end
	if (
		( outM_expected_prev[5] !== 1'bx ) && ( outM_prev[5] !== outM_expected_prev[5] )
		&& ((outM_expected_prev[5] !== last_outM_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outM_expected_prev);
		$display ("     Real value = %b", outM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outM_exp[5] = outM_expected_prev[5];
	end
	if (
		( outS_expected_prev[0] !== 1'bx ) && ( outS_prev[0] !== outS_expected_prev[0] )
		&& ((outS_expected_prev[0] !== last_outS_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outS_expected_prev);
		$display ("     Real value = %b", outS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outS_exp[0] = outS_expected_prev[0];
	end
	if (
		( outS_expected_prev[1] !== 1'bx ) && ( outS_prev[1] !== outS_expected_prev[1] )
		&& ((outS_expected_prev[1] !== last_outS_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outS_expected_prev);
		$display ("     Real value = %b", outS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outS_exp[1] = outS_expected_prev[1];
	end
	if (
		( outS_expected_prev[2] !== 1'bx ) && ( outS_prev[2] !== outS_expected_prev[2] )
		&& ((outS_expected_prev[2] !== last_outS_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outS_expected_prev);
		$display ("     Real value = %b", outS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outS_exp[2] = outS_expected_prev[2];
	end
	if (
		( outS_expected_prev[3] !== 1'bx ) && ( outS_prev[3] !== outS_expected_prev[3] )
		&& ((outS_expected_prev[3] !== last_outS_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outS_expected_prev);
		$display ("     Real value = %b", outS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outS_exp[3] = outS_expected_prev[3];
	end
	if (
		( outS_expected_prev[4] !== 1'bx ) && ( outS_prev[4] !== outS_expected_prev[4] )
		&& ((outS_expected_prev[4] !== last_outS_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outS_expected_prev);
		$display ("     Real value = %b", outS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outS_exp[4] = outS_expected_prev[4];
	end
	if (
		( outS_expected_prev[5] !== 1'bx ) && ( outS_prev[5] !== outS_expected_prev[5] )
		&& ((outS_expected_prev[5] !== last_outS_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outS_expected_prev);
		$display ("     Real value = %b", outS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outS_exp[5] = outS_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module contadorHMS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_in_ocilador;
// wires                                               
wire [4:0] outH;
wire [5:0] outM;
wire [5:0] outS;

wire sampler;                             

// assign statements (if any)                          
contadorHMS i1 (
// port map - connection between master ports and signals/registers   
	.clock_in_ocilador(clock_in_ocilador),
	.outH(outH),
	.outM(outM),
	.outS(outS)
);

// clock_in_ocilador
always
begin
	clock_in_ocilador = 1'b0;
	clock_in_ocilador = #500 1'b1;
	#500;
end 

contadorHMS_vlg_sample_tst tb_sample (
	.clock_in_ocilador(clock_in_ocilador),
	.sampler_tx(sampler)
);

contadorHMS_vlg_check_tst tb_out(
	.outH(outH),
	.outM(outM),
	.outS(outS),
	.sampler_rx(sampler)
);
endmodule

