// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2018 04:07:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controle_vlg_sample_tst(
	clockIn,
	conf,
	mode,
	reset,
	set,
	starStop,
	sampler_tx
);
input  clockIn;
input  conf;
input  mode;
input  reset;
input  set;
input  starStop;
output sampler_tx;

reg sample;
time current_time;
always @(clockIn or conf or mode or reset or set or starStop)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controle_vlg_check_tst (
	DisplayHEX0,
	DisplayHEX1,
	DisplayHEX2,
	DisplayHEX3,
	DisplayHEX4,
	DisplayHEX5,
	DisplayHEX6,
	DisplayHEX7,
	ledG8AlarmeAtivo,
	ledR1R0G7G6Alarma,
	ledR17Config,
	sampler_rx
);
input [6:0] DisplayHEX0;
input [6:0] DisplayHEX1;
input [6:0] DisplayHEX2;
input [6:0] DisplayHEX3;
input [6:0] DisplayHEX4;
input [6:0] DisplayHEX5;
input [6:0] DisplayHEX6;
input [6:0] DisplayHEX7;
input  ledG8AlarmeAtivo;
input [3:0] ledR1R0G7G6Alarma;
input  ledR17Config;
input sampler_rx;

reg [6:0] DisplayHEX0_expected;
reg [6:0] DisplayHEX1_expected;
reg [6:0] DisplayHEX2_expected;
reg [6:0] DisplayHEX3_expected;
reg [6:0] DisplayHEX4_expected;
reg [6:0] DisplayHEX5_expected;
reg [6:0] DisplayHEX6_expected;
reg [6:0] DisplayHEX7_expected;
reg  ledG8AlarmeAtivo_expected;
reg [3:0] ledR1R0G7G6Alarma_expected;
reg  ledR17Config_expected;

reg [6:0] DisplayHEX0_prev;
reg [6:0] DisplayHEX1_prev;
reg [6:0] DisplayHEX2_prev;
reg [6:0] DisplayHEX3_prev;
reg [6:0] DisplayHEX4_prev;
reg [6:0] DisplayHEX5_prev;
reg [6:0] DisplayHEX6_prev;
reg [6:0] DisplayHEX7_prev;
reg  ledG8AlarmeAtivo_prev;
reg [3:0] ledR1R0G7G6Alarma_prev;
reg  ledR17Config_prev;

reg [6:0] DisplayHEX0_expected_prev;
reg [6:0] DisplayHEX1_expected_prev;
reg [6:0] DisplayHEX2_expected_prev;
reg [6:0] DisplayHEX3_expected_prev;
reg [6:0] DisplayHEX4_expected_prev;
reg [6:0] DisplayHEX5_expected_prev;
reg [6:0] DisplayHEX6_expected_prev;
reg [6:0] DisplayHEX7_expected_prev;
reg  ledG8AlarmeAtivo_expected_prev;
reg [3:0] ledR1R0G7G6Alarma_expected_prev;
reg  ledR17Config_expected_prev;

reg [6:0] last_DisplayHEX0_exp;
reg [6:0] last_DisplayHEX1_exp;
reg [6:0] last_DisplayHEX2_exp;
reg [6:0] last_DisplayHEX3_exp;
reg [6:0] last_DisplayHEX4_exp;
reg [6:0] last_DisplayHEX5_exp;
reg [6:0] last_DisplayHEX6_exp;
reg [6:0] last_DisplayHEX7_exp;
reg  last_ledG8AlarmeAtivo_exp;
reg [3:0] last_ledR1R0G7G6Alarma_exp;
reg  last_ledR17Config_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	DisplayHEX0_prev = DisplayHEX0;
	DisplayHEX1_prev = DisplayHEX1;
	DisplayHEX2_prev = DisplayHEX2;
	DisplayHEX3_prev = DisplayHEX3;
	DisplayHEX4_prev = DisplayHEX4;
	DisplayHEX5_prev = DisplayHEX5;
	DisplayHEX6_prev = DisplayHEX6;
	DisplayHEX7_prev = DisplayHEX7;
	ledG8AlarmeAtivo_prev = ledG8AlarmeAtivo;
	ledR1R0G7G6Alarma_prev = ledR1R0G7G6Alarma;
	ledR17Config_prev = ledR17Config;
end

// update expected /o prevs

always @(trigger)
begin
	DisplayHEX0_expected_prev = DisplayHEX0_expected;
	DisplayHEX1_expected_prev = DisplayHEX1_expected;
	DisplayHEX2_expected_prev = DisplayHEX2_expected;
	DisplayHEX3_expected_prev = DisplayHEX3_expected;
	DisplayHEX4_expected_prev = DisplayHEX4_expected;
	DisplayHEX5_expected_prev = DisplayHEX5_expected;
	DisplayHEX6_expected_prev = DisplayHEX6_expected;
	DisplayHEX7_expected_prev = DisplayHEX7_expected;
	ledG8AlarmeAtivo_expected_prev = ledG8AlarmeAtivo_expected;
	ledR1R0G7G6Alarma_expected_prev = ledR1R0G7G6Alarma_expected;
	ledR17Config_expected_prev = ledR17Config_expected;
end


// expected DisplayHEX0[ 6 ]
initial
begin
	DisplayHEX0_expected[6] = 1'bX;
end 
// expected DisplayHEX0[ 5 ]
initial
begin
	DisplayHEX0_expected[5] = 1'bX;
end 
// expected DisplayHEX0[ 4 ]
initial
begin
	DisplayHEX0_expected[4] = 1'bX;
end 
// expected DisplayHEX0[ 3 ]
initial
begin
	DisplayHEX0_expected[3] = 1'bX;
end 
// expected DisplayHEX0[ 2 ]
initial
begin
	DisplayHEX0_expected[2] = 1'bX;
end 
// expected DisplayHEX0[ 1 ]
initial
begin
	DisplayHEX0_expected[1] = 1'bX;
end 
// expected DisplayHEX0[ 0 ]
initial
begin
	DisplayHEX0_expected[0] = 1'bX;
end 
// expected DisplayHEX1[ 6 ]
initial
begin
	DisplayHEX1_expected[6] = 1'bX;
end 
// expected DisplayHEX1[ 5 ]
initial
begin
	DisplayHEX1_expected[5] = 1'bX;
end 
// expected DisplayHEX1[ 4 ]
initial
begin
	DisplayHEX1_expected[4] = 1'bX;
end 
// expected DisplayHEX1[ 3 ]
initial
begin
	DisplayHEX1_expected[3] = 1'bX;
end 
// expected DisplayHEX1[ 2 ]
initial
begin
	DisplayHEX1_expected[2] = 1'bX;
end 
// expected DisplayHEX1[ 1 ]
initial
begin
	DisplayHEX1_expected[1] = 1'bX;
end 
// expected DisplayHEX1[ 0 ]
initial
begin
	DisplayHEX1_expected[0] = 1'bX;
end 
// expected DisplayHEX2[ 6 ]
initial
begin
	DisplayHEX2_expected[6] = 1'bX;
end 
// expected DisplayHEX2[ 5 ]
initial
begin
	DisplayHEX2_expected[5] = 1'bX;
end 
// expected DisplayHEX2[ 4 ]
initial
begin
	DisplayHEX2_expected[4] = 1'bX;
end 
// expected DisplayHEX2[ 3 ]
initial
begin
	DisplayHEX2_expected[3] = 1'bX;
end 
// expected DisplayHEX2[ 2 ]
initial
begin
	DisplayHEX2_expected[2] = 1'bX;
end 
// expected DisplayHEX2[ 1 ]
initial
begin
	DisplayHEX2_expected[1] = 1'bX;
end 
// expected DisplayHEX2[ 0 ]
initial
begin
	DisplayHEX2_expected[0] = 1'bX;
end 
// expected DisplayHEX3[ 6 ]
initial
begin
	DisplayHEX3_expected[6] = 1'bX;
end 
// expected DisplayHEX3[ 5 ]
initial
begin
	DisplayHEX3_expected[5] = 1'bX;
end 
// expected DisplayHEX3[ 4 ]
initial
begin
	DisplayHEX3_expected[4] = 1'bX;
end 
// expected DisplayHEX3[ 3 ]
initial
begin
	DisplayHEX3_expected[3] = 1'bX;
end 
// expected DisplayHEX3[ 2 ]
initial
begin
	DisplayHEX3_expected[2] = 1'bX;
end 
// expected DisplayHEX3[ 1 ]
initial
begin
	DisplayHEX3_expected[1] = 1'bX;
end 
// expected DisplayHEX3[ 0 ]
initial
begin
	DisplayHEX3_expected[0] = 1'bX;
end 
// expected DisplayHEX4[ 6 ]
initial
begin
	DisplayHEX4_expected[6] = 1'bX;
end 
// expected DisplayHEX4[ 5 ]
initial
begin
	DisplayHEX4_expected[5] = 1'bX;
end 
// expected DisplayHEX4[ 4 ]
initial
begin
	DisplayHEX4_expected[4] = 1'bX;
end 
// expected DisplayHEX4[ 3 ]
initial
begin
	DisplayHEX4_expected[3] = 1'bX;
end 
// expected DisplayHEX4[ 2 ]
initial
begin
	DisplayHEX4_expected[2] = 1'bX;
end 
// expected DisplayHEX4[ 1 ]
initial
begin
	DisplayHEX4_expected[1] = 1'bX;
end 
// expected DisplayHEX4[ 0 ]
initial
begin
	DisplayHEX4_expected[0] = 1'bX;
end 
// expected DisplayHEX5[ 6 ]
initial
begin
	DisplayHEX5_expected[6] = 1'bX;
end 
// expected DisplayHEX5[ 5 ]
initial
begin
	DisplayHEX5_expected[5] = 1'bX;
end 
// expected DisplayHEX5[ 4 ]
initial
begin
	DisplayHEX5_expected[4] = 1'bX;
end 
// expected DisplayHEX5[ 3 ]
initial
begin
	DisplayHEX5_expected[3] = 1'bX;
end 
// expected DisplayHEX5[ 2 ]
initial
begin
	DisplayHEX5_expected[2] = 1'bX;
end 
// expected DisplayHEX5[ 1 ]
initial
begin
	DisplayHEX5_expected[1] = 1'bX;
end 
// expected DisplayHEX5[ 0 ]
initial
begin
	DisplayHEX5_expected[0] = 1'bX;
end 
// expected DisplayHEX6[ 6 ]
initial
begin
	DisplayHEX6_expected[6] = 1'bX;
end 
// expected DisplayHEX6[ 5 ]
initial
begin
	DisplayHEX6_expected[5] = 1'bX;
end 
// expected DisplayHEX6[ 4 ]
initial
begin
	DisplayHEX6_expected[4] = 1'bX;
end 
// expected DisplayHEX6[ 3 ]
initial
begin
	DisplayHEX6_expected[3] = 1'bX;
end 
// expected DisplayHEX6[ 2 ]
initial
begin
	DisplayHEX6_expected[2] = 1'bX;
end 
// expected DisplayHEX6[ 1 ]
initial
begin
	DisplayHEX6_expected[1] = 1'bX;
end 
// expected DisplayHEX6[ 0 ]
initial
begin
	DisplayHEX6_expected[0] = 1'bX;
end 
// expected DisplayHEX7[ 6 ]
initial
begin
	DisplayHEX7_expected[6] = 1'bX;
end 
// expected DisplayHEX7[ 5 ]
initial
begin
	DisplayHEX7_expected[5] = 1'bX;
end 
// expected DisplayHEX7[ 4 ]
initial
begin
	DisplayHEX7_expected[4] = 1'bX;
end 
// expected DisplayHEX7[ 3 ]
initial
begin
	DisplayHEX7_expected[3] = 1'bX;
end 
// expected DisplayHEX7[ 2 ]
initial
begin
	DisplayHEX7_expected[2] = 1'bX;
end 
// expected DisplayHEX7[ 1 ]
initial
begin
	DisplayHEX7_expected[1] = 1'bX;
end 
// expected DisplayHEX7[ 0 ]
initial
begin
	DisplayHEX7_expected[0] = 1'bX;
end 

// expected ledG8AlarmeAtivo
initial
begin
	ledG8AlarmeAtivo_expected = 1'bX;
end 
// expected ledR1R0G7G6Alarma[ 3 ]
initial
begin
	ledR1R0G7G6Alarma_expected[3] = 1'bX;
end 
// expected ledR1R0G7G6Alarma[ 2 ]
initial
begin
	ledR1R0G7G6Alarma_expected[2] = 1'bX;
end 
// expected ledR1R0G7G6Alarma[ 1 ]
initial
begin
	ledR1R0G7G6Alarma_expected[1] = 1'bX;
end 
// expected ledR1R0G7G6Alarma[ 0 ]
initial
begin
	ledR1R0G7G6Alarma_expected[0] = 1'bX;
end 

// expected ledR17Config
initial
begin
	ledR17Config_expected = 1'bX;
end 
// generate trigger
always @(DisplayHEX0_expected or DisplayHEX0 or DisplayHEX1_expected or DisplayHEX1 or DisplayHEX2_expected or DisplayHEX2 or DisplayHEX3_expected or DisplayHEX3 or DisplayHEX4_expected or DisplayHEX4 or DisplayHEX5_expected or DisplayHEX5 or DisplayHEX6_expected or DisplayHEX6 or DisplayHEX7_expected or DisplayHEX7 or ledG8AlarmeAtivo_expected or ledG8AlarmeAtivo or ledR1R0G7G6Alarma_expected or ledR1R0G7G6Alarma or ledR17Config_expected or ledR17Config)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DisplayHEX0 = %b | expected DisplayHEX1 = %b | expected DisplayHEX2 = %b | expected DisplayHEX3 = %b | expected DisplayHEX4 = %b | expected DisplayHEX5 = %b | expected DisplayHEX6 = %b | expected DisplayHEX7 = %b | expected ledG8AlarmeAtivo = %b | expected ledR1R0G7G6Alarma = %b | expected ledR17Config = %b | ",DisplayHEX0_expected_prev,DisplayHEX1_expected_prev,DisplayHEX2_expected_prev,DisplayHEX3_expected_prev,DisplayHEX4_expected_prev,DisplayHEX5_expected_prev,DisplayHEX6_expected_prev,DisplayHEX7_expected_prev,ledG8AlarmeAtivo_expected_prev,ledR1R0G7G6Alarma_expected_prev,ledR17Config_expected_prev);
	$display("| real DisplayHEX0 = %b | real DisplayHEX1 = %b | real DisplayHEX2 = %b | real DisplayHEX3 = %b | real DisplayHEX4 = %b | real DisplayHEX5 = %b | real DisplayHEX6 = %b | real DisplayHEX7 = %b | real ledG8AlarmeAtivo = %b | real ledR1R0G7G6Alarma = %b | real ledR17Config = %b | ",DisplayHEX0_prev,DisplayHEX1_prev,DisplayHEX2_prev,DisplayHEX3_prev,DisplayHEX4_prev,DisplayHEX5_prev,DisplayHEX6_prev,DisplayHEX7_prev,ledG8AlarmeAtivo_prev,ledR1R0G7G6Alarma_prev,ledR17Config_prev);
`endif
	if (
		( DisplayHEX0_expected_prev[0] !== 1'bx ) && ( DisplayHEX0_prev[0] !== DisplayHEX0_expected_prev[0] )
		&& ((DisplayHEX0_expected_prev[0] !== last_DisplayHEX0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayHEX0_exp[0] = DisplayHEX0_expected_prev[0];
	end
	if (
		( DisplayHEX0_expected_prev[1] !== 1'bx ) && ( DisplayHEX0_prev[1] !== DisplayHEX0_expected_prev[1] )
		&& ((DisplayHEX0_expected_prev[1] !== last_DisplayHEX0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayHEX0_exp[1] = DisplayHEX0_expected_prev[1];
	end
	if (
		( DisplayHEX0_expected_prev[2] !== 1'bx ) && ( DisplayHEX0_prev[2] !== DisplayHEX0_expected_prev[2] )
		&& ((DisplayHEX0_expected_prev[2] !== last_DisplayHEX0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayHEX0_exp[2] = DisplayHEX0_expected_prev[2];
	end
	if (
		( DisplayHEX0_expected_prev[3] !== 1'bx ) && ( DisplayHEX0_prev[3] !== DisplayHEX0_expected_prev[3] )
		&& ((DisplayHEX0_expected_prev[3] !== last_DisplayHEX0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayHEX0_exp[3] = DisplayHEX0_expected_prev[3];
	end
	if (
		( DisplayHEX0_expected_prev[4] !== 1'bx ) && ( DisplayHEX0_prev[4] !== DisplayHEX0_expected_prev[4] )
		&& ((DisplayHEX0_expected_prev[4] !== last_DisplayHEX0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayHEX0_exp[4] = DisplayHEX0_expected_prev[4];
	end
	if (
		( DisplayHEX0_expected_prev[5] !== 1'bx ) && ( DisplayHEX0_prev[5] !== DisplayHEX0_expected_prev[5] )
		&& ((DisplayHEX0_expected_prev[5] !== last_DisplayHEX0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayHEX0_exp[5] = DisplayHEX0_expected_prev[5];
	end
	if (
		( DisplayHEX0_expected_prev[6] !== 1'bx ) && ( DisplayHEX0_prev[6] !== DisplayHEX0_expected_prev[6] )
		&& ((DisplayHEX0_expected_prev[6] !== last_DisplayHEX0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX0_expected_prev);
		$display ("     Real value = %b", DisplayHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayHEX0_exp[6] = DisplayHEX0_expected_prev[6];
	end
	if (
		( DisplayHEX1_expected_prev[0] !== 1'bx ) && ( DisplayHEX1_prev[0] !== DisplayHEX1_expected_prev[0] )
		&& ((DisplayHEX1_expected_prev[0] !== last_DisplayHEX1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayHEX1_exp[0] = DisplayHEX1_expected_prev[0];
	end
	if (
		( DisplayHEX1_expected_prev[1] !== 1'bx ) && ( DisplayHEX1_prev[1] !== DisplayHEX1_expected_prev[1] )
		&& ((DisplayHEX1_expected_prev[1] !== last_DisplayHEX1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayHEX1_exp[1] = DisplayHEX1_expected_prev[1];
	end
	if (
		( DisplayHEX1_expected_prev[2] !== 1'bx ) && ( DisplayHEX1_prev[2] !== DisplayHEX1_expected_prev[2] )
		&& ((DisplayHEX1_expected_prev[2] !== last_DisplayHEX1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayHEX1_exp[2] = DisplayHEX1_expected_prev[2];
	end
	if (
		( DisplayHEX1_expected_prev[3] !== 1'bx ) && ( DisplayHEX1_prev[3] !== DisplayHEX1_expected_prev[3] )
		&& ((DisplayHEX1_expected_prev[3] !== last_DisplayHEX1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayHEX1_exp[3] = DisplayHEX1_expected_prev[3];
	end
	if (
		( DisplayHEX1_expected_prev[4] !== 1'bx ) && ( DisplayHEX1_prev[4] !== DisplayHEX1_expected_prev[4] )
		&& ((DisplayHEX1_expected_prev[4] !== last_DisplayHEX1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayHEX1_exp[4] = DisplayHEX1_expected_prev[4];
	end
	if (
		( DisplayHEX1_expected_prev[5] !== 1'bx ) && ( DisplayHEX1_prev[5] !== DisplayHEX1_expected_prev[5] )
		&& ((DisplayHEX1_expected_prev[5] !== last_DisplayHEX1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayHEX1_exp[5] = DisplayHEX1_expected_prev[5];
	end
	if (
		( DisplayHEX1_expected_prev[6] !== 1'bx ) && ( DisplayHEX1_prev[6] !== DisplayHEX1_expected_prev[6] )
		&& ((DisplayHEX1_expected_prev[6] !== last_DisplayHEX1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX1_expected_prev);
		$display ("     Real value = %b", DisplayHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DisplayHEX1_exp[6] = DisplayHEX1_expected_prev[6];
	end
	if (
		( DisplayHEX2_expected_prev[0] !== 1'bx ) && ( DisplayHEX2_prev[0] !== DisplayHEX2_expected_prev[0] )
		&& ((DisplayHEX2_expected_prev[0] !== last_DisplayHEX2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX2_expected_prev);
		$display ("     Real value = %b", DisplayHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayHEX2_exp[0] = DisplayHEX2_expected_prev[0];
	end
	if (
		( DisplayHEX2_expected_prev[1] !== 1'bx ) && ( DisplayHEX2_prev[1] !== DisplayHEX2_expected_prev[1] )
		&& ((DisplayHEX2_expected_prev[1] !== last_DisplayHEX2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX2_expected_prev);
		$display ("     Real value = %b", DisplayHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayHEX2_exp[1] = DisplayHEX2_expected_prev[1];
	end
	if (
		( DisplayHEX2_expected_prev[2] !== 1'bx ) && ( DisplayHEX2_prev[2] !== DisplayHEX2_expected_prev[2] )
		&& ((DisplayHEX2_expected_prev[2] !== last_DisplayHEX2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX2_expected_prev);
		$display ("     Real value = %b", DisplayHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayHEX2_exp[2] = DisplayHEX2_expected_prev[2];
	end
	if (
		( DisplayHEX2_expected_prev[3] !== 1'bx ) && ( DisplayHEX2_prev[3] !== DisplayHEX2_expected_prev[3] )
		&& ((DisplayHEX2_expected_prev[3] !== last_DisplayHEX2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX2_expected_prev);
		$display ("     Real value = %b", DisplayHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayHEX2_exp[3] = DisplayHEX2_expected_prev[3];
	end
	if (
		( DisplayHEX2_expected_prev[4] !== 1'bx ) && ( DisplayHEX2_prev[4] !== DisplayHEX2_expected_prev[4] )
		&& ((DisplayHEX2_expected_prev[4] !== last_DisplayHEX2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX2_expected_prev);
		$display ("     Real value = %b", DisplayHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayHEX2_exp[4] = DisplayHEX2_expected_prev[4];
	end
	if (
		( DisplayHEX2_expected_prev[5] !== 1'bx ) && ( DisplayHEX2_prev[5] !== DisplayHEX2_expected_prev[5] )
		&& ((DisplayHEX2_expected_prev[5] !== last_DisplayHEX2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX2_expected_prev);
		$display ("     Real value = %b", DisplayHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayHEX2_exp[5] = DisplayHEX2_expected_prev[5];
	end
	if (
		( DisplayHEX2_expected_prev[6] !== 1'bx ) && ( DisplayHEX2_prev[6] !== DisplayHEX2_expected_prev[6] )
		&& ((DisplayHEX2_expected_prev[6] !== last_DisplayHEX2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX2_expected_prev);
		$display ("     Real value = %b", DisplayHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DisplayHEX2_exp[6] = DisplayHEX2_expected_prev[6];
	end
	if (
		( DisplayHEX3_expected_prev[0] !== 1'bx ) && ( DisplayHEX3_prev[0] !== DisplayHEX3_expected_prev[0] )
		&& ((DisplayHEX3_expected_prev[0] !== last_DisplayHEX3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX3_expected_prev);
		$display ("     Real value = %b", DisplayHEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX3_exp[0] = DisplayHEX3_expected_prev[0];
	end
	if (
		( DisplayHEX3_expected_prev[1] !== 1'bx ) && ( DisplayHEX3_prev[1] !== DisplayHEX3_expected_prev[1] )
		&& ((DisplayHEX3_expected_prev[1] !== last_DisplayHEX3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX3_expected_prev);
		$display ("     Real value = %b", DisplayHEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX3_exp[1] = DisplayHEX3_expected_prev[1];
	end
	if (
		( DisplayHEX3_expected_prev[2] !== 1'bx ) && ( DisplayHEX3_prev[2] !== DisplayHEX3_expected_prev[2] )
		&& ((DisplayHEX3_expected_prev[2] !== last_DisplayHEX3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX3_expected_prev);
		$display ("     Real value = %b", DisplayHEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX3_exp[2] = DisplayHEX3_expected_prev[2];
	end
	if (
		( DisplayHEX3_expected_prev[3] !== 1'bx ) && ( DisplayHEX3_prev[3] !== DisplayHEX3_expected_prev[3] )
		&& ((DisplayHEX3_expected_prev[3] !== last_DisplayHEX3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX3_expected_prev);
		$display ("     Real value = %b", DisplayHEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX3_exp[3] = DisplayHEX3_expected_prev[3];
	end
	if (
		( DisplayHEX3_expected_prev[4] !== 1'bx ) && ( DisplayHEX3_prev[4] !== DisplayHEX3_expected_prev[4] )
		&& ((DisplayHEX3_expected_prev[4] !== last_DisplayHEX3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX3_expected_prev);
		$display ("     Real value = %b", DisplayHEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX3_exp[4] = DisplayHEX3_expected_prev[4];
	end
	if (
		( DisplayHEX3_expected_prev[5] !== 1'bx ) && ( DisplayHEX3_prev[5] !== DisplayHEX3_expected_prev[5] )
		&& ((DisplayHEX3_expected_prev[5] !== last_DisplayHEX3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX3_expected_prev);
		$display ("     Real value = %b", DisplayHEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX3_exp[5] = DisplayHEX3_expected_prev[5];
	end
	if (
		( DisplayHEX3_expected_prev[6] !== 1'bx ) && ( DisplayHEX3_prev[6] !== DisplayHEX3_expected_prev[6] )
		&& ((DisplayHEX3_expected_prev[6] !== last_DisplayHEX3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX3_expected_prev);
		$display ("     Real value = %b", DisplayHEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DisplayHEX3_exp[6] = DisplayHEX3_expected_prev[6];
	end
	if (
		( DisplayHEX4_expected_prev[0] !== 1'bx ) && ( DisplayHEX4_prev[0] !== DisplayHEX4_expected_prev[0] )
		&& ((DisplayHEX4_expected_prev[0] !== last_DisplayHEX4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX4_expected_prev);
		$display ("     Real value = %b", DisplayHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX4_exp[0] = DisplayHEX4_expected_prev[0];
	end
	if (
		( DisplayHEX4_expected_prev[1] !== 1'bx ) && ( DisplayHEX4_prev[1] !== DisplayHEX4_expected_prev[1] )
		&& ((DisplayHEX4_expected_prev[1] !== last_DisplayHEX4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX4_expected_prev);
		$display ("     Real value = %b", DisplayHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX4_exp[1] = DisplayHEX4_expected_prev[1];
	end
	if (
		( DisplayHEX4_expected_prev[2] !== 1'bx ) && ( DisplayHEX4_prev[2] !== DisplayHEX4_expected_prev[2] )
		&& ((DisplayHEX4_expected_prev[2] !== last_DisplayHEX4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX4_expected_prev);
		$display ("     Real value = %b", DisplayHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX4_exp[2] = DisplayHEX4_expected_prev[2];
	end
	if (
		( DisplayHEX4_expected_prev[3] !== 1'bx ) && ( DisplayHEX4_prev[3] !== DisplayHEX4_expected_prev[3] )
		&& ((DisplayHEX4_expected_prev[3] !== last_DisplayHEX4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX4_expected_prev);
		$display ("     Real value = %b", DisplayHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX4_exp[3] = DisplayHEX4_expected_prev[3];
	end
	if (
		( DisplayHEX4_expected_prev[4] !== 1'bx ) && ( DisplayHEX4_prev[4] !== DisplayHEX4_expected_prev[4] )
		&& ((DisplayHEX4_expected_prev[4] !== last_DisplayHEX4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX4_expected_prev);
		$display ("     Real value = %b", DisplayHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX4_exp[4] = DisplayHEX4_expected_prev[4];
	end
	if (
		( DisplayHEX4_expected_prev[5] !== 1'bx ) && ( DisplayHEX4_prev[5] !== DisplayHEX4_expected_prev[5] )
		&& ((DisplayHEX4_expected_prev[5] !== last_DisplayHEX4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX4_expected_prev);
		$display ("     Real value = %b", DisplayHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX4_exp[5] = DisplayHEX4_expected_prev[5];
	end
	if (
		( DisplayHEX4_expected_prev[6] !== 1'bx ) && ( DisplayHEX4_prev[6] !== DisplayHEX4_expected_prev[6] )
		&& ((DisplayHEX4_expected_prev[6] !== last_DisplayHEX4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX4_expected_prev);
		$display ("     Real value = %b", DisplayHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DisplayHEX4_exp[6] = DisplayHEX4_expected_prev[6];
	end
	if (
		( DisplayHEX5_expected_prev[0] !== 1'bx ) && ( DisplayHEX5_prev[0] !== DisplayHEX5_expected_prev[0] )
		&& ((DisplayHEX5_expected_prev[0] !== last_DisplayHEX5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX5_expected_prev);
		$display ("     Real value = %b", DisplayHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayHEX5_exp[0] = DisplayHEX5_expected_prev[0];
	end
	if (
		( DisplayHEX5_expected_prev[1] !== 1'bx ) && ( DisplayHEX5_prev[1] !== DisplayHEX5_expected_prev[1] )
		&& ((DisplayHEX5_expected_prev[1] !== last_DisplayHEX5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX5_expected_prev);
		$display ("     Real value = %b", DisplayHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayHEX5_exp[1] = DisplayHEX5_expected_prev[1];
	end
	if (
		( DisplayHEX5_expected_prev[2] !== 1'bx ) && ( DisplayHEX5_prev[2] !== DisplayHEX5_expected_prev[2] )
		&& ((DisplayHEX5_expected_prev[2] !== last_DisplayHEX5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX5_expected_prev);
		$display ("     Real value = %b", DisplayHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayHEX5_exp[2] = DisplayHEX5_expected_prev[2];
	end
	if (
		( DisplayHEX5_expected_prev[3] !== 1'bx ) && ( DisplayHEX5_prev[3] !== DisplayHEX5_expected_prev[3] )
		&& ((DisplayHEX5_expected_prev[3] !== last_DisplayHEX5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX5_expected_prev);
		$display ("     Real value = %b", DisplayHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayHEX5_exp[3] = DisplayHEX5_expected_prev[3];
	end
	if (
		( DisplayHEX5_expected_prev[4] !== 1'bx ) && ( DisplayHEX5_prev[4] !== DisplayHEX5_expected_prev[4] )
		&& ((DisplayHEX5_expected_prev[4] !== last_DisplayHEX5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX5_expected_prev);
		$display ("     Real value = %b", DisplayHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayHEX5_exp[4] = DisplayHEX5_expected_prev[4];
	end
	if (
		( DisplayHEX5_expected_prev[5] !== 1'bx ) && ( DisplayHEX5_prev[5] !== DisplayHEX5_expected_prev[5] )
		&& ((DisplayHEX5_expected_prev[5] !== last_DisplayHEX5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX5_expected_prev);
		$display ("     Real value = %b", DisplayHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayHEX5_exp[5] = DisplayHEX5_expected_prev[5];
	end
	if (
		( DisplayHEX5_expected_prev[6] !== 1'bx ) && ( DisplayHEX5_prev[6] !== DisplayHEX5_expected_prev[6] )
		&& ((DisplayHEX5_expected_prev[6] !== last_DisplayHEX5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX5_expected_prev);
		$display ("     Real value = %b", DisplayHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DisplayHEX5_exp[6] = DisplayHEX5_expected_prev[6];
	end
	if (
		( DisplayHEX6_expected_prev[0] !== 1'bx ) && ( DisplayHEX6_prev[0] !== DisplayHEX6_expected_prev[0] )
		&& ((DisplayHEX6_expected_prev[0] !== last_DisplayHEX6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX6_expected_prev);
		$display ("     Real value = %b", DisplayHEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayHEX6_exp[0] = DisplayHEX6_expected_prev[0];
	end
	if (
		( DisplayHEX6_expected_prev[1] !== 1'bx ) && ( DisplayHEX6_prev[1] !== DisplayHEX6_expected_prev[1] )
		&& ((DisplayHEX6_expected_prev[1] !== last_DisplayHEX6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX6_expected_prev);
		$display ("     Real value = %b", DisplayHEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayHEX6_exp[1] = DisplayHEX6_expected_prev[1];
	end
	if (
		( DisplayHEX6_expected_prev[2] !== 1'bx ) && ( DisplayHEX6_prev[2] !== DisplayHEX6_expected_prev[2] )
		&& ((DisplayHEX6_expected_prev[2] !== last_DisplayHEX6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX6_expected_prev);
		$display ("     Real value = %b", DisplayHEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayHEX6_exp[2] = DisplayHEX6_expected_prev[2];
	end
	if (
		( DisplayHEX6_expected_prev[3] !== 1'bx ) && ( DisplayHEX6_prev[3] !== DisplayHEX6_expected_prev[3] )
		&& ((DisplayHEX6_expected_prev[3] !== last_DisplayHEX6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX6_expected_prev);
		$display ("     Real value = %b", DisplayHEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayHEX6_exp[3] = DisplayHEX6_expected_prev[3];
	end
	if (
		( DisplayHEX6_expected_prev[4] !== 1'bx ) && ( DisplayHEX6_prev[4] !== DisplayHEX6_expected_prev[4] )
		&& ((DisplayHEX6_expected_prev[4] !== last_DisplayHEX6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX6_expected_prev);
		$display ("     Real value = %b", DisplayHEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayHEX6_exp[4] = DisplayHEX6_expected_prev[4];
	end
	if (
		( DisplayHEX6_expected_prev[5] !== 1'bx ) && ( DisplayHEX6_prev[5] !== DisplayHEX6_expected_prev[5] )
		&& ((DisplayHEX6_expected_prev[5] !== last_DisplayHEX6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX6_expected_prev);
		$display ("     Real value = %b", DisplayHEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayHEX6_exp[5] = DisplayHEX6_expected_prev[5];
	end
	if (
		( DisplayHEX6_expected_prev[6] !== 1'bx ) && ( DisplayHEX6_prev[6] !== DisplayHEX6_expected_prev[6] )
		&& ((DisplayHEX6_expected_prev[6] !== last_DisplayHEX6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX6_expected_prev);
		$display ("     Real value = %b", DisplayHEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DisplayHEX6_exp[6] = DisplayHEX6_expected_prev[6];
	end
	if (
		( DisplayHEX7_expected_prev[0] !== 1'bx ) && ( DisplayHEX7_prev[0] !== DisplayHEX7_expected_prev[0] )
		&& ((DisplayHEX7_expected_prev[0] !== last_DisplayHEX7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX7_expected_prev);
		$display ("     Real value = %b", DisplayHEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayHEX7_exp[0] = DisplayHEX7_expected_prev[0];
	end
	if (
		( DisplayHEX7_expected_prev[1] !== 1'bx ) && ( DisplayHEX7_prev[1] !== DisplayHEX7_expected_prev[1] )
		&& ((DisplayHEX7_expected_prev[1] !== last_DisplayHEX7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX7_expected_prev);
		$display ("     Real value = %b", DisplayHEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayHEX7_exp[1] = DisplayHEX7_expected_prev[1];
	end
	if (
		( DisplayHEX7_expected_prev[2] !== 1'bx ) && ( DisplayHEX7_prev[2] !== DisplayHEX7_expected_prev[2] )
		&& ((DisplayHEX7_expected_prev[2] !== last_DisplayHEX7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX7_expected_prev);
		$display ("     Real value = %b", DisplayHEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayHEX7_exp[2] = DisplayHEX7_expected_prev[2];
	end
	if (
		( DisplayHEX7_expected_prev[3] !== 1'bx ) && ( DisplayHEX7_prev[3] !== DisplayHEX7_expected_prev[3] )
		&& ((DisplayHEX7_expected_prev[3] !== last_DisplayHEX7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX7_expected_prev);
		$display ("     Real value = %b", DisplayHEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayHEX7_exp[3] = DisplayHEX7_expected_prev[3];
	end
	if (
		( DisplayHEX7_expected_prev[4] !== 1'bx ) && ( DisplayHEX7_prev[4] !== DisplayHEX7_expected_prev[4] )
		&& ((DisplayHEX7_expected_prev[4] !== last_DisplayHEX7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX7_expected_prev);
		$display ("     Real value = %b", DisplayHEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayHEX7_exp[4] = DisplayHEX7_expected_prev[4];
	end
	if (
		( DisplayHEX7_expected_prev[5] !== 1'bx ) && ( DisplayHEX7_prev[5] !== DisplayHEX7_expected_prev[5] )
		&& ((DisplayHEX7_expected_prev[5] !== last_DisplayHEX7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX7_expected_prev);
		$display ("     Real value = %b", DisplayHEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayHEX7_exp[5] = DisplayHEX7_expected_prev[5];
	end
	if (
		( DisplayHEX7_expected_prev[6] !== 1'bx ) && ( DisplayHEX7_prev[6] !== DisplayHEX7_expected_prev[6] )
		&& ((DisplayHEX7_expected_prev[6] !== last_DisplayHEX7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayHEX7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayHEX7_expected_prev);
		$display ("     Real value = %b", DisplayHEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DisplayHEX7_exp[6] = DisplayHEX7_expected_prev[6];
	end
	if (
		( ledG8AlarmeAtivo_expected_prev !== 1'bx ) && ( ledG8AlarmeAtivo_prev !== ledG8AlarmeAtivo_expected_prev )
		&& ((ledG8AlarmeAtivo_expected_prev !== last_ledG8AlarmeAtivo_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledG8AlarmeAtivo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledG8AlarmeAtivo_expected_prev);
		$display ("     Real value = %b", ledG8AlarmeAtivo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ledG8AlarmeAtivo_exp = ledG8AlarmeAtivo_expected_prev;
	end
	if (
		( ledR1R0G7G6Alarma_expected_prev[0] !== 1'bx ) && ( ledR1R0G7G6Alarma_prev[0] !== ledR1R0G7G6Alarma_expected_prev[0] )
		&& ((ledR1R0G7G6Alarma_expected_prev[0] !== last_ledR1R0G7G6Alarma_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledR1R0G7G6Alarma[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledR1R0G7G6Alarma_expected_prev);
		$display ("     Real value = %b", ledR1R0G7G6Alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledR1R0G7G6Alarma_exp[0] = ledR1R0G7G6Alarma_expected_prev[0];
	end
	if (
		( ledR1R0G7G6Alarma_expected_prev[1] !== 1'bx ) && ( ledR1R0G7G6Alarma_prev[1] !== ledR1R0G7G6Alarma_expected_prev[1] )
		&& ((ledR1R0G7G6Alarma_expected_prev[1] !== last_ledR1R0G7G6Alarma_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledR1R0G7G6Alarma[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledR1R0G7G6Alarma_expected_prev);
		$display ("     Real value = %b", ledR1R0G7G6Alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledR1R0G7G6Alarma_exp[1] = ledR1R0G7G6Alarma_expected_prev[1];
	end
	if (
		( ledR1R0G7G6Alarma_expected_prev[2] !== 1'bx ) && ( ledR1R0G7G6Alarma_prev[2] !== ledR1R0G7G6Alarma_expected_prev[2] )
		&& ((ledR1R0G7G6Alarma_expected_prev[2] !== last_ledR1R0G7G6Alarma_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledR1R0G7G6Alarma[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledR1R0G7G6Alarma_expected_prev);
		$display ("     Real value = %b", ledR1R0G7G6Alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledR1R0G7G6Alarma_exp[2] = ledR1R0G7G6Alarma_expected_prev[2];
	end
	if (
		( ledR1R0G7G6Alarma_expected_prev[3] !== 1'bx ) && ( ledR1R0G7G6Alarma_prev[3] !== ledR1R0G7G6Alarma_expected_prev[3] )
		&& ((ledR1R0G7G6Alarma_expected_prev[3] !== last_ledR1R0G7G6Alarma_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledR1R0G7G6Alarma[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledR1R0G7G6Alarma_expected_prev);
		$display ("     Real value = %b", ledR1R0G7G6Alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledR1R0G7G6Alarma_exp[3] = ledR1R0G7G6Alarma_expected_prev[3];
	end
	if (
		( ledR17Config_expected_prev !== 1'bx ) && ( ledR17Config_prev !== ledR17Config_expected_prev )
		&& ((ledR17Config_expected_prev !== last_ledR17Config_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledR17Config :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledR17Config_expected_prev);
		$display ("     Real value = %b", ledR17Config_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledR17Config_exp = ledR17Config_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clockIn;
reg conf;
reg mode;
reg reset;
reg set;
reg starStop;
// wires                                               
wire [6:0] DisplayHEX0;
wire [6:0] DisplayHEX1;
wire [6:0] DisplayHEX2;
wire [6:0] DisplayHEX3;
wire [6:0] DisplayHEX4;
wire [6:0] DisplayHEX5;
wire [6:0] DisplayHEX6;
wire [6:0] DisplayHEX7;
wire ledG8AlarmeAtivo;
wire [3:0] ledR1R0G7G6Alarma;
wire ledR17Config;

wire sampler;                             

// assign statements (if any)                          
controle i1 (
// port map - connection between master ports and signals/registers   
	.clockIn(clockIn),
	.conf(conf),
	.DisplayHEX0(DisplayHEX0),
	.DisplayHEX1(DisplayHEX1),
	.DisplayHEX2(DisplayHEX2),
	.DisplayHEX3(DisplayHEX3),
	.DisplayHEX4(DisplayHEX4),
	.DisplayHEX5(DisplayHEX5),
	.DisplayHEX6(DisplayHEX6),
	.DisplayHEX7(DisplayHEX7),
	.ledG8AlarmeAtivo(ledG8AlarmeAtivo),
	.ledR1R0G7G6Alarma(ledR1R0G7G6Alarma),
	.ledR17Config(ledR17Config),
	.mode(mode),
	.reset(reset),
	.set(set),
	.starStop(starStop)
);

// clockIn
always
begin
	clockIn = 1'b0;
	clockIn = #500 1'b1;
	#500;
end 

// conf
initial
begin
	conf = 1'b0;
end 

// mode
initial
begin
	mode = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// set
initial
begin
	set = 1'b0;
end 

// starStop
initial
begin
	starStop = 1'b0;
end 

controle_vlg_sample_tst tb_sample (
	.clockIn(clockIn),
	.conf(conf),
	.mode(mode),
	.reset(reset),
	.set(set),
	.starStop(starStop),
	.sampler_tx(sampler)
);

controle_vlg_check_tst tb_out(
	.DisplayHEX0(DisplayHEX0),
	.DisplayHEX1(DisplayHEX1),
	.DisplayHEX2(DisplayHEX2),
	.DisplayHEX3(DisplayHEX3),
	.DisplayHEX4(DisplayHEX4),
	.DisplayHEX5(DisplayHEX5),
	.DisplayHEX6(DisplayHEX6),
	.DisplayHEX7(DisplayHEX7),
	.ledG8AlarmeAtivo(ledG8AlarmeAtivo),
	.ledR1R0G7G6Alarma(ledR1R0G7G6Alarma),
	.ledR17Config(ledR17Config),
	.sampler_rx(sampler)
);
endmodule

