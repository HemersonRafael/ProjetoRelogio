// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2018 15:43:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    relogio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relogio_vlg_sample_tst(
	clockIn,
	sampler_tx
);
input  clockIn;
output sampler_tx;

reg sample;
time current_time;
always @(clockIn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module relogio_vlg_check_tst (
	outDisplayDezenaHoras,
	outDisplayDezenaMinutos,
	outDisplayDezenaSegundos,
	outDisplayUnidadeHoras,
	outDisplayUnidadeMinutos,
	outDisplayUnidadeSegundos,
	sampler_rx
);
input [6:0] outDisplayDezenaHoras;
input [6:0] outDisplayDezenaMinutos;
input [6:0] outDisplayDezenaSegundos;
input [6:0] outDisplayUnidadeHoras;
input [6:0] outDisplayUnidadeMinutos;
input [6:0] outDisplayUnidadeSegundos;
input sampler_rx;

reg [6:0] outDisplayDezenaHoras_expected;
reg [6:0] outDisplayDezenaMinutos_expected;
reg [6:0] outDisplayDezenaSegundos_expected;
reg [6:0] outDisplayUnidadeHoras_expected;
reg [6:0] outDisplayUnidadeMinutos_expected;
reg [6:0] outDisplayUnidadeSegundos_expected;

reg [6:0] outDisplayDezenaHoras_prev;
reg [6:0] outDisplayDezenaMinutos_prev;
reg [6:0] outDisplayDezenaSegundos_prev;
reg [6:0] outDisplayUnidadeHoras_prev;
reg [6:0] outDisplayUnidadeMinutos_prev;
reg [6:0] outDisplayUnidadeSegundos_prev;

reg [6:0] outDisplayDezenaHoras_expected_prev;
reg [6:0] outDisplayDezenaMinutos_expected_prev;
reg [6:0] outDisplayDezenaSegundos_expected_prev;
reg [6:0] outDisplayUnidadeHoras_expected_prev;
reg [6:0] outDisplayUnidadeMinutos_expected_prev;
reg [6:0] outDisplayUnidadeSegundos_expected_prev;

reg [6:0] last_outDisplayDezenaHoras_exp;
reg [6:0] last_outDisplayDezenaMinutos_exp;
reg [6:0] last_outDisplayDezenaSegundos_exp;
reg [6:0] last_outDisplayUnidadeHoras_exp;
reg [6:0] last_outDisplayUnidadeMinutos_exp;
reg [6:0] last_outDisplayUnidadeSegundos_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	outDisplayDezenaHoras_prev = outDisplayDezenaHoras;
	outDisplayDezenaMinutos_prev = outDisplayDezenaMinutos;
	outDisplayDezenaSegundos_prev = outDisplayDezenaSegundos;
	outDisplayUnidadeHoras_prev = outDisplayUnidadeHoras;
	outDisplayUnidadeMinutos_prev = outDisplayUnidadeMinutos;
	outDisplayUnidadeSegundos_prev = outDisplayUnidadeSegundos;
end

// update expected /o prevs

always @(trigger)
begin
	outDisplayDezenaHoras_expected_prev = outDisplayDezenaHoras_expected;
	outDisplayDezenaMinutos_expected_prev = outDisplayDezenaMinutos_expected;
	outDisplayDezenaSegundos_expected_prev = outDisplayDezenaSegundos_expected;
	outDisplayUnidadeHoras_expected_prev = outDisplayUnidadeHoras_expected;
	outDisplayUnidadeMinutos_expected_prev = outDisplayUnidadeMinutos_expected;
	outDisplayUnidadeSegundos_expected_prev = outDisplayUnidadeSegundos_expected;
end


// expected outDisplayDezenaHoras[ 6 ]
initial
begin
	outDisplayDezenaHoras_expected[6] = 1'bX;
end 
// expected outDisplayDezenaHoras[ 5 ]
initial
begin
	outDisplayDezenaHoras_expected[5] = 1'bX;
end 
// expected outDisplayDezenaHoras[ 4 ]
initial
begin
	outDisplayDezenaHoras_expected[4] = 1'bX;
end 
// expected outDisplayDezenaHoras[ 3 ]
initial
begin
	outDisplayDezenaHoras_expected[3] = 1'bX;
end 
// expected outDisplayDezenaHoras[ 2 ]
initial
begin
	outDisplayDezenaHoras_expected[2] = 1'bX;
end 
// expected outDisplayDezenaHoras[ 1 ]
initial
begin
	outDisplayDezenaHoras_expected[1] = 1'bX;
end 
// expected outDisplayDezenaHoras[ 0 ]
initial
begin
	outDisplayDezenaHoras_expected[0] = 1'bX;
end 
// expected outDisplayDezenaMinutos[ 6 ]
initial
begin
	outDisplayDezenaMinutos_expected[6] = 1'bX;
end 
// expected outDisplayDezenaMinutos[ 5 ]
initial
begin
	outDisplayDezenaMinutos_expected[5] = 1'bX;
end 
// expected outDisplayDezenaMinutos[ 4 ]
initial
begin
	outDisplayDezenaMinutos_expected[4] = 1'bX;
end 
// expected outDisplayDezenaMinutos[ 3 ]
initial
begin
	outDisplayDezenaMinutos_expected[3] = 1'bX;
end 
// expected outDisplayDezenaMinutos[ 2 ]
initial
begin
	outDisplayDezenaMinutos_expected[2] = 1'bX;
end 
// expected outDisplayDezenaMinutos[ 1 ]
initial
begin
	outDisplayDezenaMinutos_expected[1] = 1'bX;
end 
// expected outDisplayDezenaMinutos[ 0 ]
initial
begin
	outDisplayDezenaMinutos_expected[0] = 1'bX;
end 
// expected outDisplayDezenaSegundos[ 6 ]
initial
begin
	outDisplayDezenaSegundos_expected[6] = 1'bX;
end 
// expected outDisplayDezenaSegundos[ 5 ]
initial
begin
	outDisplayDezenaSegundos_expected[5] = 1'bX;
end 
// expected outDisplayDezenaSegundos[ 4 ]
initial
begin
	outDisplayDezenaSegundos_expected[4] = 1'bX;
end 
// expected outDisplayDezenaSegundos[ 3 ]
initial
begin
	outDisplayDezenaSegundos_expected[3] = 1'bX;
end 
// expected outDisplayDezenaSegundos[ 2 ]
initial
begin
	outDisplayDezenaSegundos_expected[2] = 1'bX;
end 
// expected outDisplayDezenaSegundos[ 1 ]
initial
begin
	outDisplayDezenaSegundos_expected[1] = 1'bX;
end 
// expected outDisplayDezenaSegundos[ 0 ]
initial
begin
	outDisplayDezenaSegundos_expected[0] = 1'bX;
end 
// expected outDisplayUnidadeHoras[ 6 ]
initial
begin
	outDisplayUnidadeHoras_expected[6] = 1'bX;
end 
// expected outDisplayUnidadeHoras[ 5 ]
initial
begin
	outDisplayUnidadeHoras_expected[5] = 1'bX;
end 
// expected outDisplayUnidadeHoras[ 4 ]
initial
begin
	outDisplayUnidadeHoras_expected[4] = 1'bX;
end 
// expected outDisplayUnidadeHoras[ 3 ]
initial
begin
	outDisplayUnidadeHoras_expected[3] = 1'bX;
end 
// expected outDisplayUnidadeHoras[ 2 ]
initial
begin
	outDisplayUnidadeHoras_expected[2] = 1'bX;
end 
// expected outDisplayUnidadeHoras[ 1 ]
initial
begin
	outDisplayUnidadeHoras_expected[1] = 1'bX;
end 
// expected outDisplayUnidadeHoras[ 0 ]
initial
begin
	outDisplayUnidadeHoras_expected[0] = 1'bX;
end 
// expected outDisplayUnidadeMinutos[ 6 ]
initial
begin
	outDisplayUnidadeMinutos_expected[6] = 1'bX;
end 
// expected outDisplayUnidadeMinutos[ 5 ]
initial
begin
	outDisplayUnidadeMinutos_expected[5] = 1'bX;
end 
// expected outDisplayUnidadeMinutos[ 4 ]
initial
begin
	outDisplayUnidadeMinutos_expected[4] = 1'bX;
end 
// expected outDisplayUnidadeMinutos[ 3 ]
initial
begin
	outDisplayUnidadeMinutos_expected[3] = 1'bX;
end 
// expected outDisplayUnidadeMinutos[ 2 ]
initial
begin
	outDisplayUnidadeMinutos_expected[2] = 1'bX;
end 
// expected outDisplayUnidadeMinutos[ 1 ]
initial
begin
	outDisplayUnidadeMinutos_expected[1] = 1'bX;
end 
// expected outDisplayUnidadeMinutos[ 0 ]
initial
begin
	outDisplayUnidadeMinutos_expected[0] = 1'bX;
end 
// expected outDisplayUnidadeSegundos[ 6 ]
initial
begin
	outDisplayUnidadeSegundos_expected[6] = 1'bX;
end 
// expected outDisplayUnidadeSegundos[ 5 ]
initial
begin
	outDisplayUnidadeSegundos_expected[5] = 1'bX;
end 
// expected outDisplayUnidadeSegundos[ 4 ]
initial
begin
	outDisplayUnidadeSegundos_expected[4] = 1'bX;
end 
// expected outDisplayUnidadeSegundos[ 3 ]
initial
begin
	outDisplayUnidadeSegundos_expected[3] = 1'bX;
end 
// expected outDisplayUnidadeSegundos[ 2 ]
initial
begin
	outDisplayUnidadeSegundos_expected[2] = 1'bX;
end 
// expected outDisplayUnidadeSegundos[ 1 ]
initial
begin
	outDisplayUnidadeSegundos_expected[1] = 1'bX;
end 
// expected outDisplayUnidadeSegundos[ 0 ]
initial
begin
	outDisplayUnidadeSegundos_expected[0] = 1'bX;
end 
// generate trigger
always @(outDisplayDezenaHoras_expected or outDisplayDezenaHoras or outDisplayDezenaMinutos_expected or outDisplayDezenaMinutos or outDisplayDezenaSegundos_expected or outDisplayDezenaSegundos or outDisplayUnidadeHoras_expected or outDisplayUnidadeHoras or outDisplayUnidadeMinutos_expected or outDisplayUnidadeMinutos or outDisplayUnidadeSegundos_expected or outDisplayUnidadeSegundos)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outDisplayDezenaHoras = %b | expected outDisplayDezenaMinutos = %b | expected outDisplayDezenaSegundos = %b | expected outDisplayUnidadeHoras = %b | expected outDisplayUnidadeMinutos = %b | expected outDisplayUnidadeSegundos = %b | ",outDisplayDezenaHoras_expected_prev,outDisplayDezenaMinutos_expected_prev,outDisplayDezenaSegundos_expected_prev,outDisplayUnidadeHoras_expected_prev,outDisplayUnidadeMinutos_expected_prev,outDisplayUnidadeSegundos_expected_prev);
	$display("| real outDisplayDezenaHoras = %b | real outDisplayDezenaMinutos = %b | real outDisplayDezenaSegundos = %b | real outDisplayUnidadeHoras = %b | real outDisplayUnidadeMinutos = %b | real outDisplayUnidadeSegundos = %b | ",outDisplayDezenaHoras_prev,outDisplayDezenaMinutos_prev,outDisplayDezenaSegundos_prev,outDisplayUnidadeHoras_prev,outDisplayUnidadeMinutos_prev,outDisplayUnidadeSegundos_prev);
`endif
	if (
		( outDisplayDezenaHoras_expected_prev[0] !== 1'bx ) && ( outDisplayDezenaHoras_prev[0] !== outDisplayDezenaHoras_expected_prev[0] )
		&& ((outDisplayDezenaHoras_expected_prev[0] !== last_outDisplayDezenaHoras_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaHoras[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outDisplayDezenaHoras_exp[0] = outDisplayDezenaHoras_expected_prev[0];
	end
	if (
		( outDisplayDezenaHoras_expected_prev[1] !== 1'bx ) && ( outDisplayDezenaHoras_prev[1] !== outDisplayDezenaHoras_expected_prev[1] )
		&& ((outDisplayDezenaHoras_expected_prev[1] !== last_outDisplayDezenaHoras_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaHoras[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outDisplayDezenaHoras_exp[1] = outDisplayDezenaHoras_expected_prev[1];
	end
	if (
		( outDisplayDezenaHoras_expected_prev[2] !== 1'bx ) && ( outDisplayDezenaHoras_prev[2] !== outDisplayDezenaHoras_expected_prev[2] )
		&& ((outDisplayDezenaHoras_expected_prev[2] !== last_outDisplayDezenaHoras_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaHoras[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outDisplayDezenaHoras_exp[2] = outDisplayDezenaHoras_expected_prev[2];
	end
	if (
		( outDisplayDezenaHoras_expected_prev[3] !== 1'bx ) && ( outDisplayDezenaHoras_prev[3] !== outDisplayDezenaHoras_expected_prev[3] )
		&& ((outDisplayDezenaHoras_expected_prev[3] !== last_outDisplayDezenaHoras_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaHoras[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outDisplayDezenaHoras_exp[3] = outDisplayDezenaHoras_expected_prev[3];
	end
	if (
		( outDisplayDezenaHoras_expected_prev[4] !== 1'bx ) && ( outDisplayDezenaHoras_prev[4] !== outDisplayDezenaHoras_expected_prev[4] )
		&& ((outDisplayDezenaHoras_expected_prev[4] !== last_outDisplayDezenaHoras_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaHoras[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outDisplayDezenaHoras_exp[4] = outDisplayDezenaHoras_expected_prev[4];
	end
	if (
		( outDisplayDezenaHoras_expected_prev[5] !== 1'bx ) && ( outDisplayDezenaHoras_prev[5] !== outDisplayDezenaHoras_expected_prev[5] )
		&& ((outDisplayDezenaHoras_expected_prev[5] !== last_outDisplayDezenaHoras_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaHoras[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outDisplayDezenaHoras_exp[5] = outDisplayDezenaHoras_expected_prev[5];
	end
	if (
		( outDisplayDezenaHoras_expected_prev[6] !== 1'bx ) && ( outDisplayDezenaHoras_prev[6] !== outDisplayDezenaHoras_expected_prev[6] )
		&& ((outDisplayDezenaHoras_expected_prev[6] !== last_outDisplayDezenaHoras_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaHoras[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaHoras_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outDisplayDezenaHoras_exp[6] = outDisplayDezenaHoras_expected_prev[6];
	end
	if (
		( outDisplayDezenaMinutos_expected_prev[0] !== 1'bx ) && ( outDisplayDezenaMinutos_prev[0] !== outDisplayDezenaMinutos_expected_prev[0] )
		&& ((outDisplayDezenaMinutos_expected_prev[0] !== last_outDisplayDezenaMinutos_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaMinutos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outDisplayDezenaMinutos_exp[0] = outDisplayDezenaMinutos_expected_prev[0];
	end
	if (
		( outDisplayDezenaMinutos_expected_prev[1] !== 1'bx ) && ( outDisplayDezenaMinutos_prev[1] !== outDisplayDezenaMinutos_expected_prev[1] )
		&& ((outDisplayDezenaMinutos_expected_prev[1] !== last_outDisplayDezenaMinutos_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaMinutos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outDisplayDezenaMinutos_exp[1] = outDisplayDezenaMinutos_expected_prev[1];
	end
	if (
		( outDisplayDezenaMinutos_expected_prev[2] !== 1'bx ) && ( outDisplayDezenaMinutos_prev[2] !== outDisplayDezenaMinutos_expected_prev[2] )
		&& ((outDisplayDezenaMinutos_expected_prev[2] !== last_outDisplayDezenaMinutos_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaMinutos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outDisplayDezenaMinutos_exp[2] = outDisplayDezenaMinutos_expected_prev[2];
	end
	if (
		( outDisplayDezenaMinutos_expected_prev[3] !== 1'bx ) && ( outDisplayDezenaMinutos_prev[3] !== outDisplayDezenaMinutos_expected_prev[3] )
		&& ((outDisplayDezenaMinutos_expected_prev[3] !== last_outDisplayDezenaMinutos_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaMinutos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outDisplayDezenaMinutos_exp[3] = outDisplayDezenaMinutos_expected_prev[3];
	end
	if (
		( outDisplayDezenaMinutos_expected_prev[4] !== 1'bx ) && ( outDisplayDezenaMinutos_prev[4] !== outDisplayDezenaMinutos_expected_prev[4] )
		&& ((outDisplayDezenaMinutos_expected_prev[4] !== last_outDisplayDezenaMinutos_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaMinutos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outDisplayDezenaMinutos_exp[4] = outDisplayDezenaMinutos_expected_prev[4];
	end
	if (
		( outDisplayDezenaMinutos_expected_prev[5] !== 1'bx ) && ( outDisplayDezenaMinutos_prev[5] !== outDisplayDezenaMinutos_expected_prev[5] )
		&& ((outDisplayDezenaMinutos_expected_prev[5] !== last_outDisplayDezenaMinutos_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaMinutos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outDisplayDezenaMinutos_exp[5] = outDisplayDezenaMinutos_expected_prev[5];
	end
	if (
		( outDisplayDezenaMinutos_expected_prev[6] !== 1'bx ) && ( outDisplayDezenaMinutos_prev[6] !== outDisplayDezenaMinutos_expected_prev[6] )
		&& ((outDisplayDezenaMinutos_expected_prev[6] !== last_outDisplayDezenaMinutos_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaMinutos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outDisplayDezenaMinutos_exp[6] = outDisplayDezenaMinutos_expected_prev[6];
	end
	if (
		( outDisplayDezenaSegundos_expected_prev[0] !== 1'bx ) && ( outDisplayDezenaSegundos_prev[0] !== outDisplayDezenaSegundos_expected_prev[0] )
		&& ((outDisplayDezenaSegundos_expected_prev[0] !== last_outDisplayDezenaSegundos_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaSegundos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outDisplayDezenaSegundos_exp[0] = outDisplayDezenaSegundos_expected_prev[0];
	end
	if (
		( outDisplayDezenaSegundos_expected_prev[1] !== 1'bx ) && ( outDisplayDezenaSegundos_prev[1] !== outDisplayDezenaSegundos_expected_prev[1] )
		&& ((outDisplayDezenaSegundos_expected_prev[1] !== last_outDisplayDezenaSegundos_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaSegundos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outDisplayDezenaSegundos_exp[1] = outDisplayDezenaSegundos_expected_prev[1];
	end
	if (
		( outDisplayDezenaSegundos_expected_prev[2] !== 1'bx ) && ( outDisplayDezenaSegundos_prev[2] !== outDisplayDezenaSegundos_expected_prev[2] )
		&& ((outDisplayDezenaSegundos_expected_prev[2] !== last_outDisplayDezenaSegundos_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaSegundos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outDisplayDezenaSegundos_exp[2] = outDisplayDezenaSegundos_expected_prev[2];
	end
	if (
		( outDisplayDezenaSegundos_expected_prev[3] !== 1'bx ) && ( outDisplayDezenaSegundos_prev[3] !== outDisplayDezenaSegundos_expected_prev[3] )
		&& ((outDisplayDezenaSegundos_expected_prev[3] !== last_outDisplayDezenaSegundos_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaSegundos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outDisplayDezenaSegundos_exp[3] = outDisplayDezenaSegundos_expected_prev[3];
	end
	if (
		( outDisplayDezenaSegundos_expected_prev[4] !== 1'bx ) && ( outDisplayDezenaSegundos_prev[4] !== outDisplayDezenaSegundos_expected_prev[4] )
		&& ((outDisplayDezenaSegundos_expected_prev[4] !== last_outDisplayDezenaSegundos_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaSegundos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outDisplayDezenaSegundos_exp[4] = outDisplayDezenaSegundos_expected_prev[4];
	end
	if (
		( outDisplayDezenaSegundos_expected_prev[5] !== 1'bx ) && ( outDisplayDezenaSegundos_prev[5] !== outDisplayDezenaSegundos_expected_prev[5] )
		&& ((outDisplayDezenaSegundos_expected_prev[5] !== last_outDisplayDezenaSegundos_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaSegundos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outDisplayDezenaSegundos_exp[5] = outDisplayDezenaSegundos_expected_prev[5];
	end
	if (
		( outDisplayDezenaSegundos_expected_prev[6] !== 1'bx ) && ( outDisplayDezenaSegundos_prev[6] !== outDisplayDezenaSegundos_expected_prev[6] )
		&& ((outDisplayDezenaSegundos_expected_prev[6] !== last_outDisplayDezenaSegundos_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayDezenaSegundos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayDezenaSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayDezenaSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outDisplayDezenaSegundos_exp[6] = outDisplayDezenaSegundos_expected_prev[6];
	end
	if (
		( outDisplayUnidadeHoras_expected_prev[0] !== 1'bx ) && ( outDisplayUnidadeHoras_prev[0] !== outDisplayUnidadeHoras_expected_prev[0] )
		&& ((outDisplayUnidadeHoras_expected_prev[0] !== last_outDisplayUnidadeHoras_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeHoras[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outDisplayUnidadeHoras_exp[0] = outDisplayUnidadeHoras_expected_prev[0];
	end
	if (
		( outDisplayUnidadeHoras_expected_prev[1] !== 1'bx ) && ( outDisplayUnidadeHoras_prev[1] !== outDisplayUnidadeHoras_expected_prev[1] )
		&& ((outDisplayUnidadeHoras_expected_prev[1] !== last_outDisplayUnidadeHoras_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeHoras[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outDisplayUnidadeHoras_exp[1] = outDisplayUnidadeHoras_expected_prev[1];
	end
	if (
		( outDisplayUnidadeHoras_expected_prev[2] !== 1'bx ) && ( outDisplayUnidadeHoras_prev[2] !== outDisplayUnidadeHoras_expected_prev[2] )
		&& ((outDisplayUnidadeHoras_expected_prev[2] !== last_outDisplayUnidadeHoras_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeHoras[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outDisplayUnidadeHoras_exp[2] = outDisplayUnidadeHoras_expected_prev[2];
	end
	if (
		( outDisplayUnidadeHoras_expected_prev[3] !== 1'bx ) && ( outDisplayUnidadeHoras_prev[3] !== outDisplayUnidadeHoras_expected_prev[3] )
		&& ((outDisplayUnidadeHoras_expected_prev[3] !== last_outDisplayUnidadeHoras_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeHoras[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outDisplayUnidadeHoras_exp[3] = outDisplayUnidadeHoras_expected_prev[3];
	end
	if (
		( outDisplayUnidadeHoras_expected_prev[4] !== 1'bx ) && ( outDisplayUnidadeHoras_prev[4] !== outDisplayUnidadeHoras_expected_prev[4] )
		&& ((outDisplayUnidadeHoras_expected_prev[4] !== last_outDisplayUnidadeHoras_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeHoras[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outDisplayUnidadeHoras_exp[4] = outDisplayUnidadeHoras_expected_prev[4];
	end
	if (
		( outDisplayUnidadeHoras_expected_prev[5] !== 1'bx ) && ( outDisplayUnidadeHoras_prev[5] !== outDisplayUnidadeHoras_expected_prev[5] )
		&& ((outDisplayUnidadeHoras_expected_prev[5] !== last_outDisplayUnidadeHoras_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeHoras[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outDisplayUnidadeHoras_exp[5] = outDisplayUnidadeHoras_expected_prev[5];
	end
	if (
		( outDisplayUnidadeHoras_expected_prev[6] !== 1'bx ) && ( outDisplayUnidadeHoras_prev[6] !== outDisplayUnidadeHoras_expected_prev[6] )
		&& ((outDisplayUnidadeHoras_expected_prev[6] !== last_outDisplayUnidadeHoras_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeHoras[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeHoras_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeHoras_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outDisplayUnidadeHoras_exp[6] = outDisplayUnidadeHoras_expected_prev[6];
	end
	if (
		( outDisplayUnidadeMinutos_expected_prev[0] !== 1'bx ) && ( outDisplayUnidadeMinutos_prev[0] !== outDisplayUnidadeMinutos_expected_prev[0] )
		&& ((outDisplayUnidadeMinutos_expected_prev[0] !== last_outDisplayUnidadeMinutos_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeMinutos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outDisplayUnidadeMinutos_exp[0] = outDisplayUnidadeMinutos_expected_prev[0];
	end
	if (
		( outDisplayUnidadeMinutos_expected_prev[1] !== 1'bx ) && ( outDisplayUnidadeMinutos_prev[1] !== outDisplayUnidadeMinutos_expected_prev[1] )
		&& ((outDisplayUnidadeMinutos_expected_prev[1] !== last_outDisplayUnidadeMinutos_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeMinutos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outDisplayUnidadeMinutos_exp[1] = outDisplayUnidadeMinutos_expected_prev[1];
	end
	if (
		( outDisplayUnidadeMinutos_expected_prev[2] !== 1'bx ) && ( outDisplayUnidadeMinutos_prev[2] !== outDisplayUnidadeMinutos_expected_prev[2] )
		&& ((outDisplayUnidadeMinutos_expected_prev[2] !== last_outDisplayUnidadeMinutos_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeMinutos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outDisplayUnidadeMinutos_exp[2] = outDisplayUnidadeMinutos_expected_prev[2];
	end
	if (
		( outDisplayUnidadeMinutos_expected_prev[3] !== 1'bx ) && ( outDisplayUnidadeMinutos_prev[3] !== outDisplayUnidadeMinutos_expected_prev[3] )
		&& ((outDisplayUnidadeMinutos_expected_prev[3] !== last_outDisplayUnidadeMinutos_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeMinutos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outDisplayUnidadeMinutos_exp[3] = outDisplayUnidadeMinutos_expected_prev[3];
	end
	if (
		( outDisplayUnidadeMinutos_expected_prev[4] !== 1'bx ) && ( outDisplayUnidadeMinutos_prev[4] !== outDisplayUnidadeMinutos_expected_prev[4] )
		&& ((outDisplayUnidadeMinutos_expected_prev[4] !== last_outDisplayUnidadeMinutos_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeMinutos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outDisplayUnidadeMinutos_exp[4] = outDisplayUnidadeMinutos_expected_prev[4];
	end
	if (
		( outDisplayUnidadeMinutos_expected_prev[5] !== 1'bx ) && ( outDisplayUnidadeMinutos_prev[5] !== outDisplayUnidadeMinutos_expected_prev[5] )
		&& ((outDisplayUnidadeMinutos_expected_prev[5] !== last_outDisplayUnidadeMinutos_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeMinutos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outDisplayUnidadeMinutos_exp[5] = outDisplayUnidadeMinutos_expected_prev[5];
	end
	if (
		( outDisplayUnidadeMinutos_expected_prev[6] !== 1'bx ) && ( outDisplayUnidadeMinutos_prev[6] !== outDisplayUnidadeMinutos_expected_prev[6] )
		&& ((outDisplayUnidadeMinutos_expected_prev[6] !== last_outDisplayUnidadeMinutos_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeMinutos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeMinutos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeMinutos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outDisplayUnidadeMinutos_exp[6] = outDisplayUnidadeMinutos_expected_prev[6];
	end
	if (
		( outDisplayUnidadeSegundos_expected_prev[0] !== 1'bx ) && ( outDisplayUnidadeSegundos_prev[0] !== outDisplayUnidadeSegundos_expected_prev[0] )
		&& ((outDisplayUnidadeSegundos_expected_prev[0] !== last_outDisplayUnidadeSegundos_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeSegundos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outDisplayUnidadeSegundos_exp[0] = outDisplayUnidadeSegundos_expected_prev[0];
	end
	if (
		( outDisplayUnidadeSegundos_expected_prev[1] !== 1'bx ) && ( outDisplayUnidadeSegundos_prev[1] !== outDisplayUnidadeSegundos_expected_prev[1] )
		&& ((outDisplayUnidadeSegundos_expected_prev[1] !== last_outDisplayUnidadeSegundos_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeSegundos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outDisplayUnidadeSegundos_exp[1] = outDisplayUnidadeSegundos_expected_prev[1];
	end
	if (
		( outDisplayUnidadeSegundos_expected_prev[2] !== 1'bx ) && ( outDisplayUnidadeSegundos_prev[2] !== outDisplayUnidadeSegundos_expected_prev[2] )
		&& ((outDisplayUnidadeSegundos_expected_prev[2] !== last_outDisplayUnidadeSegundos_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeSegundos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outDisplayUnidadeSegundos_exp[2] = outDisplayUnidadeSegundos_expected_prev[2];
	end
	if (
		( outDisplayUnidadeSegundos_expected_prev[3] !== 1'bx ) && ( outDisplayUnidadeSegundos_prev[3] !== outDisplayUnidadeSegundos_expected_prev[3] )
		&& ((outDisplayUnidadeSegundos_expected_prev[3] !== last_outDisplayUnidadeSegundos_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeSegundos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outDisplayUnidadeSegundos_exp[3] = outDisplayUnidadeSegundos_expected_prev[3];
	end
	if (
		( outDisplayUnidadeSegundos_expected_prev[4] !== 1'bx ) && ( outDisplayUnidadeSegundos_prev[4] !== outDisplayUnidadeSegundos_expected_prev[4] )
		&& ((outDisplayUnidadeSegundos_expected_prev[4] !== last_outDisplayUnidadeSegundos_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeSegundos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outDisplayUnidadeSegundos_exp[4] = outDisplayUnidadeSegundos_expected_prev[4];
	end
	if (
		( outDisplayUnidadeSegundos_expected_prev[5] !== 1'bx ) && ( outDisplayUnidadeSegundos_prev[5] !== outDisplayUnidadeSegundos_expected_prev[5] )
		&& ((outDisplayUnidadeSegundos_expected_prev[5] !== last_outDisplayUnidadeSegundos_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeSegundos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outDisplayUnidadeSegundos_exp[5] = outDisplayUnidadeSegundos_expected_prev[5];
	end
	if (
		( outDisplayUnidadeSegundos_expected_prev[6] !== 1'bx ) && ( outDisplayUnidadeSegundos_prev[6] !== outDisplayUnidadeSegundos_expected_prev[6] )
		&& ((outDisplayUnidadeSegundos_expected_prev[6] !== last_outDisplayUnidadeSegundos_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outDisplayUnidadeSegundos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outDisplayUnidadeSegundos_expected_prev);
		$display ("     Real value = %b", outDisplayUnidadeSegundos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outDisplayUnidadeSegundos_exp[6] = outDisplayUnidadeSegundos_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module relogio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clockIn;
// wires                                               
wire [6:0] outDisplayDezenaHoras;
wire [6:0] outDisplayDezenaMinutos;
wire [6:0] outDisplayDezenaSegundos;
wire [6:0] outDisplayUnidadeHoras;
wire [6:0] outDisplayUnidadeMinutos;
wire [6:0] outDisplayUnidadeSegundos;

wire sampler;                             

// assign statements (if any)                          
relogio i1 (
// port map - connection between master ports and signals/registers   
	.clockIn(clockIn),
	.outDisplayDezenaHoras(outDisplayDezenaHoras),
	.outDisplayDezenaMinutos(outDisplayDezenaMinutos),
	.outDisplayDezenaSegundos(outDisplayDezenaSegundos),
	.outDisplayUnidadeHoras(outDisplayUnidadeHoras),
	.outDisplayUnidadeMinutos(outDisplayUnidadeMinutos),
	.outDisplayUnidadeSegundos(outDisplayUnidadeSegundos)
);

// clockIn
always
begin
	clockIn = 1'b0;
	clockIn = #500 1'b1;
	#500;
end 

relogio_vlg_sample_tst tb_sample (
	.clockIn(clockIn),
	.sampler_tx(sampler)
);

relogio_vlg_check_tst tb_out(
	.outDisplayDezenaHoras(outDisplayDezenaHoras),
	.outDisplayDezenaMinutos(outDisplayDezenaMinutos),
	.outDisplayDezenaSegundos(outDisplayDezenaSegundos),
	.outDisplayUnidadeHoras(outDisplayUnidadeHoras),
	.outDisplayUnidadeMinutos(outDisplayUnidadeMinutos),
	.outDisplayUnidadeSegundos(outDisplayUnidadeSegundos),
	.sampler_rx(sampler)
);
endmodule

